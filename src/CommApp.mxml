<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:comm="com.tah.comm.*"
			   xmlns:components="components.*"
			   xmlns:view="com.tah.comm.modules.media.view.*"
			   xmlns:logger="com.tah.comm.modules.logger.*" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" width="949"  height="2000"
			   xmlns:textchat="com.tah.comm.modules.textchat.*"
			   xmlns:core="com.tah.comm.modules.core.*" 
			   xmlns:nc="flash.net.NetConnection"
			   
			   creationComplete="init()">
	
	<fx:Script>
		<![CDATA[
			import com.tah.comm.common.events.CommAppEvent;
			
			import components.VideoDispUnit;
			
			import flash.events.NetStatusEvent;
			import flash.net.SharedObject;
			import flash.text.engine.FontWeight;
			
			import flashx.textLayout.container.ContainerController;
			import flashx.textLayout.elements.ParagraphElement;
			import flashx.textLayout.elements.SpanElement;
			import flashx.textLayout.elements.TextFlow;
			import flashx.textLayout.factory.TextFlowTextLineFactory;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Image;
			import mx.controls.VSlider;
			import mx.controls.VideoDisplay;
			import mx.core.mx_internal;
			import mx.states.AddChild;
			import mx.utils.ObjectUtil;
			
			import spark.components.Group;
			import spark.components.Panel;
			import spark.utils.TextFlowUtil;
			
			[Bindable] public var talkerListAC:Array;
			
			private var videoListAC:Array;
			
			private var ncSuccess:Boolean;
			
			public var talkerListSO:SharedObject;
			public var videoListSO:SharedObject;
			public var imageListSO:SharedObject;
			public var userid:String;
			public var username:String;
			public var topicid:String;
			public var topic:String;
			public var clientid:String;
			public var nc:NetConnection;
			
			private function init():void
			{
				//FLASHVARS CODE
				var paramObj:Object = this.parameters;
				
				this.userid = paramObj["userid"];
				this.username = paramObj["username"];
				this.topicid = paramObj["topicid"];
				this.topic = paramObj["topic"];
				this.clientid = null;
				
				// new netconnection
				nc = new NetConnection();
				nc.client = this;
				
				// set encoding to old amf
				nc.objectEncoding = ObjectEncoding.AMF3;
				
				// netstatus event listening
				nc.addEventListener( NetStatusEvent.NET_STATUS , netStatus );
				
				// connect to red5, passing false as parameter
				nc.connect( "rtmp://localhost:1935/tah-commapp-server/" + topicid, userid, username, topicid, topic );
				topicTitle.text = "Topic: " + topic;
				welcomeUser.text = "Welcome " + username;
				
				//set volume and mic slider
				//micVolslider = new VSlider();
				//micVolslider.x = micVol.x;
				//micVolslider.y = micVol.x;
				//micVolslider.visible = true;
				
				//set the video List
				videoListAC = new Array();
				
				talkerUnitListAC = new Array();
				//set the image List
				//imageListAC = new Array();
				
				//set the local VideoDisplay
				videoLocal = new VideoDisplay();
				videoLocal.top = 0;
				videoLocal.width = 160;
				videoLocal.height = 120;
				videoLocal.volume = spVol.value; 
				
				//icon = "http://bbs.airia.cn/UserFiles/Avatar/Big/8/3/8/83891.jpg";
				//icon.source = "@Embed=(source='assets/pandoras_star_.jpg')";
				//icon1.load(new URLRequest(@Embed(source='images/image1.jpg'));
				//icon1.source=http://www.helpexamples.com/flash/images/image1.jpg";
				//icon2.source="http://www.helpexamples.com/flash/images/image2.jpg";
				//icon3.source="http://www.helpexamples.com/flash/images/image3.jpg";
				
				doDisplay();
			}
			
			private function netStatus ( event:NetStatusEvent ):void
			{
				if( event.info.code == "NetConnection.Connect.Success" ) {
					ncSuccess = true;
					logger.addLoggingMessage("NC Success");
					talkerListSO = SharedObject.getRemote("talkerListSO-" + topicid, nc.uri, false);
					talkerListSO.connect(nc);
					talkerListSO.addEventListener(SyncEvent.SYNC, talkerListSync);
					//talkerListSO.client = this;
					logger.addLoggingMessage("SO Success");
					
					/*****************************************
					 * *Target: new SharedObject of video list
					 * *Added by: Situ
					 * ***************************************/
					videoListSO = SharedObject.getRemote("videoListSO-" + topicid,nc.uri,false);
					videoListSO.connect(nc);
					videoListSO.addEventListener(SyncEvent.SYNC, videoListSync);
					logger.addLoggingMessage("video SO Success");
					
					//imageListSO = SharedObject.getRemote("imageListSO-" + topicid,nc.uri,false);
					//imageListSO.connect(nc);
					//imageListSO.addEventListener(SyncEvent.SYNC, imageListSync);
				} else {
					ncSuccess = false;
					// connection failed
					logger.addLoggingMessage(event.info.code);
				}
			}
			
			private var firstUser:Boolean = true;
			private function talkerListSync ( event:SyncEvent ):void
			{
				logger.addLoggingMessage("++++Talker List Sync");
				
				var tmpArray:Array = new Array();
				var listName:String = "talkerListAC";
				for (var i:int = 0; i < (talkerListSO.data[ listName ]).length; i++ ) {
					tmpArray.push(((talkerListSO.data[ listName ])[i])[1]);
					
					// record the clientID generated by RED5 Server
					if(null == this.clientid){
						if(this.username == ((talkerListSO.data[ listName ])[i])[1]){
							this.clientid = ((talkerListSO.data[ listName ])[i])[0];
							logger.addLoggingMessage("client id: "+this.clientid+"   username: "+this.username);
						}
					}
				}
				//talkerListAC = new Array();
				talkerListAC = tmpArray;
				
				rebuild_talker_list_unit_list();
				
				//check if this is the first login user and show up message
				if(firstUser){
					if( talkerListAC.length==1){
						//i am the first login user
						var para:ParagraphElement = new ParagraphElement();
						var span:SpanElement = new SpanElement();
						span.text =  "Finding other users to join the conversations. This should only take a minute.";
						span.color = "#25bbdb";
						span.fontWeight = FontWeight.BOLD;
						para.addChild(span);
						txt_history.textFlow.addChild(para);
					}else{
						firstUser = false;
					}
				}				
			}
			/**************************************************************
			 * *Synchronize image list
			 * *Added by: Situ
			 * ************************************************************/
			/* 			public function imageListSync(event:SyncEvent):void{
			logger.addLoggingMessage("++++Image List Sync");
			var tmpArray:Array;
			var listName:String = "imageListAC";
			logger.addLoggingMessage("img syc step 1 ...");
			tmpArray = new Array();
			
			
			for (var i :int= 0; i < (imageListSO.data[ listName ]).length; i++ ) {
			tmpArray.push((imageListSO.data[ listName ])[i]);
			}
			logger.addLoggingMessage("img syc step 2 ...");
			imageListAC = null;
			imageListAC = tmpArray;	
			// if(videoListAC == null) {
			//logger.addLoggingMessage("videoListAC is null");
			//}else {
			//logger.addLoggingMessage("The length of videoListAC is: " + videoListAC.length);
			//} 
			
			logger.addLoggingMessage("Image List: ");
			for(var i:int =0 ; i<imageListAC.length ;i++){
			logger.addLoggingMessage(i+": "+imageListAC[i]);
			}
			doDisplay();
			} */
			/**************************************************************
			 * *Synchronize video list
			 * *Added by: Situ
			 * ************************************************************/
			
			public function videoListSync(event:SyncEvent):void
			{
				logger.addLoggingMessage("++++Video List Sync");
				//logger.addLoggingMessage(videoListSO.toString());
				
				var tmpArray:Array;
				var listName:String = "videoListAC";
				logger.addLoggingMessage("vid syc step 1 ...");
				tmpArray = new Array();
				
				
				for (var i :int= 0; i < (videoListSO.data[ listName ]).length; i++ ) {
					tmpArray.push((videoListSO.data[ listName ])[i]);
				}
				logger.addLoggingMessage("vid syc step 2 ...");
				videoListAC = null;
				videoListAC = tmpArray;	
				if(videoListAC == null) {
					logger.addLoggingMessage("videoListAC is null");
				}else {
					logger.addLoggingMessage("The length of videoListAC is: " + videoListAC.length);
				} 
				
				logger.addLoggingMessage("Video List: ");
				for(var i:int =0 ; i<videoListAC.length ;i++){
					logger.addLoggingMessage(i+": "+videoListAC[i]);
				}
				doDisplay();
			}
			
			/*protected function btn_startup_clickHandler(event:MouseEvent):void
			{
			this.dispatchEvent(new CommAppEvent(CommAppEvent.STARTUP));
			}*/
			
			protected function enter_txtevent(event:Event):void
			{
				if(txt_msg.text!=""){
					try{
						nc.call("send_msgtoroom", null, this.userid, this.username, this.topicid, txt_msg.text);
					}catch(e:Error){
						logger.addLoggingMessage(e.getStackTrace());
					}
					txt_msg.text = "";
				}
				
			}
			public function receivePublicMsg(fromUser:String, msg:String):void {
				var para:ParagraphElement = new ParagraphElement(); 
				var span1:SpanElement = new SpanElement(); 
				var span2:SpanElement = new SpanElement(); 
				span1.text = fromUser + ": "; 
				span1.fontWeight = FontWeight.BOLD;
				span2.text = msg;
				para.addChild(span1); 
				para.addChild(span2);
				txt_history.textFlow.addChild(para);
				txt_history.scroller.verticalScrollBar.value = txt_history.scroller.verticalScrollBar.maximum; 
			}
			/***************************************************************************/
			private var vi:Video;
			private var vid:Array;      //Array<Video>
			private var snd:Sound;
			private var cam:Camera;
			private var mic:Microphone;
			private var inStream:Array; //Array<NetStream>
			private var outStream:NetStream;
			//private var broadCasting = false;
			
			protected function videoStart():void
			{
				if( true == ncSuccess )
				{
					//Begins recording
					beginRec();
					getVideoLocal();
				}
				else
				{
					logger.addLoggingMessage("Cannot start video ...");
				}
			}
			protected function videoStop():void
			{
				logger.addLoggingMessage("Stopping video ...");
				endRec();
				stopVideoLocal();
			}
			///////////////////  Recording Part   ///////////////////
			
			//Start recording
			protected function beginRec():void
			{
				outStream = new NetStream(nc);
				//outStream.client = this;
				
				logger.addLoggingMessage("Bigin Recording ...");
				
				cam = Camera.getCamera();
				if(cam!=null){
					cam.setMode(320,240,15);//Set size and Frame Rate
					cam.setQuality(20000,80);//Set video quality
					
					outStream.attachCamera(cam);//activate video
				}
				
				
				mic = Microphone.getMicrophone();
				if(mic!=null){
					mic.setUseEchoSuppression(true);
					//mic.setLoopBack(true);
					//var level:int = mic.;
					//logger.addLoggingMessage("activity level: "+ level);
					mic.setSilenceLevel(5);
					mic.gain = micVol.value;
					outStream.attachAudio(mic);
				}
				
				outStream.publish(this.clientid,"live");
				
				//Add himself to the video list
				logger.addLoggingMessage("Client ID is: " + this.clientid+"  Topic ID is: "+ this.topicid);
				nc.call("send_msgtoroom", null, this.username, this.topicid, "I am adding video list");
				nc.call("addVideoList", null, this.clientid, this.topicid);
				nc.call("testMethod", null, this.clientid, this.topicid);
				logger.addLoggingMessage("++++Video List Added");
				
			}
			
			//Stop recording
			private function endRec():void
			{
				logger.addLoggingMessage("End Recording ...");
				outStream.close();
				//remove himself to the video list
				nc.call("send_msgtoroom", null, this.username, this.topicid, "I am adding video list");
				nc.call("removeVideoList", null, this.clientid, this.topicid);
				logger.addLoggingMessage("++++Video List Removed");
				
				//vi = null;
				
				
			}
			
			///////////////////\/\/\/\Recording Part/\/\/\/\//////////////////
			
			///////////////////       Displaying Part/     ///////////////////
			/*
			* Display local video
			*/
			public var videoLocal:VideoDisplay;
			
			private function getVideoLocal():void
			{
				
				logger.addLoggingMessage("Getting Local Video ... ");
				vi = new Video();
				vi.width = 160;
				vi.height = 120;
				vi.smoothing = true;
				vi.attachCamera(this.cam);
				
				videoLocal.addChild(vi);
				//videoLocal.attachCamera(this.cam);
				//doDisplay();
			}
			
			private function stopVideoLocal():void
			{
				// Don't show local video 
				//videoLocal.removeChild(vi);
				//videoLocal.attachCamera(null);
				//videoLocal.mx_internal::videoPlayer.clear();
				//videoLocal.invalidateProperties();
				
				vi.attachCamera(null);
				vi.clear();
				logger.addLoggingMessage("Video removed ...");
				
				//doDisplay();
			}
			[ArrayElementType("mx.controls.VideoDisplay")]
			private var dispListAC:Array=null;
			
			private var dispUnitListAC:Array = null;
			private var dispRowGroupAC:Array = null; //Put HGroup in it
			
			private function doDisplay():void
			{
				logger.addLoggingMessage("Do display ...");
				
				var dispRowCapacity:int = 4;
				
				//Make all netstreams in inStream stop playing
				if(null!=inStream&&inStream.length>0){
					for(var i:int=0;i<inStream.length;i++){
						(inStream[i] as NetStream).close();
					}
				}
				inStream = new Array();
				
				if(null!=vid&&vid.length>0){
					for(var i:int=0;i<vid.length;i++){
						(vid[i]as Video).clear();
					}
				}
				vid = new Array();
				
				dispRowGroupAC = new Array();
				
				while(videoGroup.numElements>0){
					videoGroup.removeElementAt(0);
				}
				logger.addLoggingMessage("row group removed");
				if(othervideoSwitch.selected){
					//Get video array of peers
					for(var i:int=0; i<videoListAC.length;i++){
						logger.addLoggingMessage("video list is not empty.");
						if( this.clientid != videoListAC[i]){
							logger.addLoggingMessage("There exist other peers on video list");
							
							var newInStream:NetStream = new NetStream(nc);
							//new Sound
							newInStream.play(videoListAC[i]as String);
							
							
							inStream.push(newInStream);
							
							var newVid:Video = new Video();
							newVid.width = 160;
							newVid.height = 120;
							newVid.smoothing = true;
							newVid.attachNetStream(newInStream);
							
							vid.push(newVid);		
							
						}
					}
					logger.addLoggingMessage("video array done!");
				}
				
				
				
				//Assgin video array to VideoDisplay array
				dispListAC = new Array();
				logger.addLoggingMessage("dispListAC new!");
				dispListAC.push(videoLocal);//Show local Video first
				logger.addLoggingMessage("videoLocal pushed!");
				for(var i:int = 0; i<vid.length;i++){
					var vDisp:VideoDisplay = new VideoDisplay();
					//Set the properties of videodisplays
					vDisp.width = (vid[i] as Video).width;
					vDisp.height = (vid[i] as Video).height;
					vDisp.addChild(vid[i]as Video);
					//vDisp.volume = spVol.value;
					logger.addLoggingMessage("volume: " + vDisp.volume);
					vDisp.top = 0;
					
					dispListAC.push(vDisp);
				}
				logger.addLoggingMessage("dispListAC done!"); 
				////////////////////////////////////////////////////////////
				dispUnitListAC = new Array();
				
				for(var i:int=0;i<dispListAC.length;i++){
					var tempUnit:VideoDispUnit = new VideoDispUnit();
					
					try{
						tempUnit.addElementAt((dispListAC[i] as VideoDisplay),0);
					}catch(e:Error){
						logger.addLoggingMessage(e.toString());
					}
					tempUnit.userName = "username"+(i+1);
					dispUnitListAC.push(tempUnit);
				}
				//Assign VidDisplay list to rowGroup and push rowGroup into dispRowGroupAC
				var newGroup:HGroup = null;
				logger.addLoggingMessage("dispListAC.length: "+dispListAC.length);
				for(var i:int=0; i<dispListAC.length; i++){
					if(i%dispRowCapacity == 0){
						if(newGroup!=null){
							dispRowGroupAC.push(newGroup);
						}
						newGroup = new HGroup();
						newGroup.gap = 5;
						newGroup.paddingLeft = 5;
						newGroup.paddingTop = 5;
					}
					//logger.addLoggingMessage("before addChild ...");
					newGroup.addElement(dispUnitListAC[i] as VideoDispUnit);
				}
				//logger.addLoggingMessage("addChild success!");
				logger.addLoggingMessage("addElement success!");
				if(newGroup!=null){
					dispRowGroupAC.push(newGroup);
				}
				logger.addLoggingMessage("VideoDisplay RowGroup Array done!");
				///////////////////////////////////////////////////////////////////
				
				//logger.addLoggingMessage("we wanna show it at videoGroup");
				logger.addLoggingMessage("dispRowGroupAC.length: " + dispRowGroupAC.length);
				for(var i:int = 0; i<dispRowGroupAC.length;i++){
					videoGroup.addElement(dispRowGroupAC[i]as HGroup);
					
					logger.addLoggingMessage("videoGroup numElement " + videoGroup.numElements);
					//logger.addLoggingMessage("videoGroup Element id: " + (dispRowGroupAC[i]as HGroup).id);
				}
				
			}
			
			///////////////////\/\/\/\Displaying Part/\/\/\///////////////////
			
			//var micVolslider:VSlider;
			private function spVolHandler():void
			{
				logger.addLoggingMessage("spVolHandler");
				for(var i:int=0;i<inStream.length;i++){
					//((dispListAC[i]as VideoDisplay).getChildAt(0)as Video). = spVol.value;
					(inStream[i]as NetStream).soundTransform = new SoundTransform(spVol.value);
					
					
					//logger.addLoggingMessage("Volume " + i + ": "+ (dispListAC[i]as VideoDisplay).volume);
					//logger.addLoggingMessage("VideoLocal volume: "+ videoLocal.volume);
				}
				logger.addLoggingMessage("complete without error");
			}
			
			//public var icon1:Image;
			//public var icon2:Image;
			//public var icon3:Image;
			
			public var icon:String;
			//public var imageListAC:Array;
			[Bindable] public var talkerUnitListAC:Array;
			
			private function rebuild_talker_list_unit_list():void
			{
				
				//var icon:Array = new Array({icon1,icon2,icon3});
				talkerUnitListAC = new Array();
				//imageListAC = new Array();
				for(var i:int=0; i<talkerListAC.length;i++){
					//imageListAC.push(icon);
					logger.addLoggingMessage("talkerListAC["+i+"]: "+talkerListAC[i]);
					talkerUnitListAC.push( {name:talkerListAC[i],icon:"http://www.talkabouthealth.com:9000/image/"+talkerListAC[i]} );
				}
				//logger.addLoggingMessage("imageListAC length: "+imageListAC.length);
				//talkerUnitListAC.name = talkerListAC;
				//talkerUnitListAC.icon = imageListAC;
			}
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<comm:CommAppContext contextView="{this}" />
	</fx:Declarations>
	<s:layout>
		<s:VerticalLayout paddingLeft="5" paddingRight="5" paddingTop="5" paddingBottom="5"/>
	</s:layout>
	<logger:LoggerModule id="logger"/>
	<s:VGroup>
		<s:VGroup id="videoGroup" left="0" top="0" paddingTop="0">
			<!--<s:VideoDisplay id="videoDisplay0" width="200" height="150"/>
			<s:VideoDisplay id="videoDisplay1" width="200" height="150"/>
			<s:VideoDisplay id="videoDisplay2" width="200" height="150"/>-->
		</s:VGroup>		
	</s:VGroup>
	<s:HGroup width="100%">
		<!--<s:Button label="StartUp" id="btn_startup" click="btn_startup_clickHandler(event)"/>-->
		<s:VGroup paddingLeft="5" paddingRight="5" paddingTop="5" paddingBottom="5" width="100%" height="100%">
			<s:HGroup>
				<!--<mx:Image id="logo" source="@Embed(source='assets/tahlogo.gif')" width="140" height="20"/>-->
				<s:Label id="topicTitle" />
			</s:HGroup>	
			<s:TextArea width="100%" height="200" id="txt_history" editable="false" enabled="true" />
			<s:HGroup>
				<mx:CheckBox id="myvideoSwitch" width="100" label="Your Video On|Off" 
							 change="if(myvideoSwitch.selected == true) videoStart();
							 else videoStop();"/>
				<mx:CheckBox id="othervideoSwitch" width="100" label="Other members Video On|Off" 
							 change=" doDisplay();" />
				
				<s:Label text="Vol:"/>
				<s:HSlider id="spVol" 						   
						   minimum="0.0"
						   maximum="1.0"
						   value="1.0"
						   snapInterval="0.01"
						   liveDragging="true"
						   thumbRelease="spVolHandler()"/>
				<s:Label text="Mic:"/>
				<s:HSlider id="micVol"
						   minimum="0"
						   maximum="100"
						   value="80"
						   snapInterval="1"
						   liveDragging="true"
						   thumbRelease="if(mic!=null)mic.gain = micVol.value"/>
			</s:HGroup>
			<s:TextInput width="100%" height="25" id="txt_msg" enter="enter_txtevent(event)"/>
		</s:VGroup>
		<s:VGroup paddingLeft="5" paddingRight="5" paddingTop="5" paddingBottom="5" width="100%" height="100%">
			<s:Label id="welcomeUser" />
			<!--<mx:Image source="photo/1.png"/>-->
			<mx:DataGrid height="260" width="178" dataProvider="{talkerUnitListAC}" rowHeight="48" resizableColumns="false" verticalCenter="0">
				<mx:columns>
					<mx:DataGridColumn headerText="Icon" width="48" >
						<mx:itemRenderer>
							<fx:Component>
								<mx:Image source="{data.icon}" height="48" width="48"/>
							</fx:Component>
						</mx:itemRenderer>
					</mx:DataGridColumn>
					<mx:DataGridColumn headerText="Name" width="130" textAlign="center">
						<mx:itemRenderer>
							<fx:Component>
								<mx:Label text="{data.name}" height="48" paddingTop="12"/>
							</fx:Component>
						</mx:itemRenderer>
					</mx:DataGridColumn>
				</mx:columns>								
			</mx:DataGrid>
			
		</s:VGroup>
	</s:HGroup>
	<s:Group>
		<s:layout>
			<s:BasicLayout/>
		</s:layout>
		<s:Label text="Warning:" color="#25bbdb"/>
		<s:Label width="650"
				 text="                  All content on this site is informational and is not substitute for professional medical advice. Always seek the advice of your physician or other qualified health provider with questions regarding your health."/>
	</s:Group>
	
</s:Application>
