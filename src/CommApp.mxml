<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:comm="com.tah.comm.*"
			   xmlns:components="components.*"
			   xmlns:view="com.tah.comm.modules.media.view.*"
			   xmlns:logger="com.tah.comm.modules.logger.*" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" width="750"
			   xmlns:textchat="com.tah.comm.modules.textchat.*"
			   xmlns:core="com.tah.comm.modules.core.*" 
			   xmlns:nc="flash.net.NetConnection"
			   
			   creationComplete="init()" height="565">
	<fx:Style source="CommApp.css"/>
	<fx:Script>
		<![CDATA[
			import com.tah.comm.common.events.CommAppEvent;
			
			import components.MyVideo;
			import components.VideoDispUnit;
			
			import flash.events.NetStatusEvent;
			import flash.net.SharedObject;
			import flash.text.engine.FontWeight;
			import flash.utils.flash_proxy;
			
			import flashx.textLayout.container.ContainerController;
			import flashx.textLayout.elements.ParagraphElement;
			import flashx.textLayout.elements.SpanElement;
			import flashx.textLayout.elements.TextFlow;
			import flashx.textLayout.factory.TextFlowTextLineFactory;
			import flashx.textLayout.formats.TextAlign;
			
			import handler.txt.*;
			import handler.txt.MessageContent;
			
			import mx.collections.ArrayCollection;
			import mx.containers.Canvas;
			import mx.containers.GridItem;
			import mx.containers.GridRow;
			import mx.containers.VBox;
			import mx.controls.Alert;
			import mx.controls.Image;
			import mx.controls.Text;
			import mx.controls.VSlider;
			import mx.controls.VideoDisplay;
			import mx.core.mx_internal;
			import mx.events.CloseEvent;
			import mx.preloaders.Preloader;
			import mx.states.AddChild;
			import mx.utils.ObjectUtil;
			
			import spark.components.Group;
			import spark.components.Panel;
			import spark.utils.TextFlowUtil;
			
			[Bindable] public var talkerListAC:Array;
			
			private var videoListAC:Array;
			
			private var ncSuccess:Boolean;
			
			public var talkerListSO:SharedObject;
			public var videoListSO:SharedObject;
			public var imageListSO:SharedObject;
			public var userid:String;
			public var username:String;
			public var topicid:String;
			public var topic:String;
			public var clientid:String;
			public var nc:NetConnection;
			public var ncDest:String = "rtmp://talkabouthealth.com:1935/tah-commapp-server/";
			//public var ncDest:String = "rtmp://127.0.0.1:1935/tah-commapp-server/";
			
			private function init():void
			{
				try{
					//FLASHVARS CODE
					var paramObj:Object = this.parameters;
					
					this.userid = paramObj["userid"];
					this.username = paramObj["username"];
					this.topicid = paramObj["topicid"];
					this.topic = paramObj["topic"];
					this.clientid = null;
					
					// new netconnection
					nc = new NetConnection();
					nc.client = this;
					
					// set encoding to old amf
					nc.objectEncoding = ObjectEncoding.AMF3;
					
					// netstatus event listening
					nc.addEventListener( NetStatusEvent.NET_STATUS , netStatus );
					
					// connect to red5, passing false as parameter
					nc.connect( ncDest + topicid, userid, username, topicid, topic );
					
					// set initial appearence
					topicTitle.text = topic;
					welcomeUser.text = "Welcome " + username;
					
					// set the video List
					videoListAC = new Array();
					
					// set the talkerUnitListAC is used to contain the online talkers' names and image icons
					talkerUnitListAC = new Array();
					
					// the local video displaying local camera
					vi = new MyVideo();
					
					// the CheckBox of "Other Members Video On" should be initially turned off;
					othervideoSwitch.selected = true;
					doDisplay();
					
					/* get the history of this topic*/
					nc.call("send_txthistory", null, this.topicid);
				}catch(e:Error){
//					logger.addLoggingMessage(e.getStackTrace());
				}
				
			}
			
			private function netStatus ( event:NetStatusEvent ):void
			{
				if( event.info.code == "NetConnection.Connect.Success" ) {
					ncSuccess = true;
//					logger.addLoggingMessage("NC Success");
					
					/* synchronize SharedObject of talker list */
					
					talkerListSO = SharedObject.getRemote("talkerListSO-" + topicid, nc.uri, false);
					talkerListSO.connect(nc);
					talkerListSO.addEventListener(SyncEvent.SYNC, talkerListSync);
					//talkerListSO.client = this;
//					logger.addLoggingMessage("SO Success");
					
					/*****************************************
					 * *Target: new SharedObject of video list
					 * *Added by: Situ
					 * ***************************************/
					
					/* synchronize SharedObject of video list */
					
					videoListSO = SharedObject.getRemote("videoListSO-" + topicid,nc.uri,false);
					videoListSO.connect(nc);
					videoListSO.addEventListener(SyncEvent.SYNC, videoListSync);
//					logger.addLoggingMessage("video SO Success");
					
					//imageListSO = SharedObject.getRemote("imageListSO-" + topicid,nc.uri,false);
					//imageListSO.connect(nc);
					//imageListSO.addEventListener(SyncEvent.SYNC, imageListSync);
				} else {
					ncSuccess = false;
					// connection failed
//					logger.addLoggingMessage(event.info.code);
					Alert.show(event.info.code+' Do you want to connect again?','Connection error',(Alert.YES | Alert.NO),null,alert_handler,null,null,null);
				}
			}
			
			private function alert_handler(event:CloseEvent):void
			{
				if(event.detail == Alert.YES)
				{
					// connect to red5, passing false as parameter
					nc.connect( ncDest + topicid, userid, username, topicid, topic );
					
					// the CheckBox of "Other Members Video On" should be initially turned off;
					othervideoSwitch.selected = true;
				}
			}
			
			private var firstUser:Boolean = true;
			private function talkerListSync ( event:SyncEvent ):void
			{
//				logger.addLoggingMessage("++++Talker List Sync");
				
				var tmpArray:Array = new Array();
				var listName:String = "talkerListAC";
				for (var i:int = 0; i < (talkerListSO.data[ listName ]).length; i++ ) {
					tmpArray.push(((talkerListSO.data[ listName ])[i])[1]);
					
					// record the clientID generated by RED5 Server
					if(null == this.clientid){
						if(this.username == ((talkerListSO.data[ listName ])[i])[1]){
							this.clientid = ((talkerListSO.data[ listName ])[i])[0];
//							logger.addLoggingMessage("client id: "+this.clientid+"   username: "+this.username);
						}
					}
				}
				//talkerListAC = new Array();
				talkerListAC = tmpArray;
				
				rebuild_talker_list_unit_list();
				
				//check if this is the first login user and show up message
				if(firstUser){
					if( talkerListAC.length==1){
						//i am the first login user
						var notice:Text = new Text();
						notice.text =  MessageContent.FIRST_LOGIN_NOTIFY;
						//lb.setStyle('color','#f790b9');
						notice.setStyle('color','#000000');
						notice.setStyle('fontWeight',FontWeight.BOLD);
						notice.setStyle('fontSize' ,12);
						//notice.setStyle('fontStyle' ,FontStyle.ITALIC);
						notice.setStyle('fontFamily' ,'Arial');
						
						var grow:GridRow = new GridRow();
						var gitem:GridItem = new GridItem();
						gitem.addChild(notice);
						
						
						///////////////////////
						grow.addChild(gitem);
						grow.width = txt_history.width;
						grow.setStyle('paddingTop',10);
						grow.setStyle('paddingBottom',1);
						grow.horizontalScrollPolicy = 'off'
						//if(txt_history.numChildren%2==0)  grow.setStyle('backgroundColor','#e8f9fe');
						grow.setStyle('backgroundColor','#e8f9fe');
						////////////////////////////////
						txt_history.addChild(grow);
						
						alrtTimer = new Timer(60000,1);
						alrtTimer.addEventListener(TimerEvent.TIMER_COMPLETE,ontimecheck);
						alrtTimer.reset();
						//logger.addLoggingMessage("Timer reseted");
						alrtTimer.start();
						//logger.addLoggingMessage("Timer started");
						//logger.addLoggingMessage("firstUser: "+ firstUser);
					}else{
						//I am not the first commer now
						firstUser = false;
					}
				}				
			}
			
			/**************************************************************
			 * *Synchronize video list
			 * *Added by: Situ
			 * ************************************************************/
			
			public function videoListSync(event:SyncEvent):void
			{
//				logger.addLoggingMessage("++++Video List Sync");
				
				var tmpArray:Array;
				var listName:String = "videoListAC";
//				logger.addLoggingMessage("vid syc step 1 ...");
				tmpArray = new Array();
				
				
				for (var i :int= 0; i < (videoListSO.data[ listName ]).length; i++ ) {
					tmpArray.push((videoListSO.data[ listName ])[i]);
				}

				videoListAC = null;
				videoListAC = tmpArray;	

				doDisplay();
			}
			
		
			
			protected function enter_txtevent():void
			{
				if(txt_msg.text!=""){
					try{
						nc.call("send_msgtoroom", null, this.userid, this.username, this.topicid, txt_msg.text);
					}catch(e:Error){
//						logger.addLoggingMessage(e.getStackTrace());
					}
					txt_msg.text = "";
					
					txt_msg.setSelection(0,0);
				}
				
			}
			public function receivePublicMsg(fromUser:String, msg:String):void {
				//var para:ParagraphElement = new ParagraphElement(); 
				/*var uname:Text = new Text(); 
			
				var txt:Text = new Text();
				//var lbl2:spark.components.Label = new spark.components.Label(); 
				uname.text = fromUser + ":"; 
				//span1.fontStyle = FontStyle.BOLD;
				uname.setStyle('paddingLeft',5);
				//uname.setStyle('paddingTop' ,0);
				uname.setStyle('fontSize' ,14);
				uname.setStyle('fontFamily' ,'Arial');
				uname.setStyle('color' ,'#25bbdb');
				//uname.setStyle('paddingTop' ,5);
				
				//uname.width = (txt_history.width-10)*0.20;

				
				txt.text = msg;
				txt.setStyle('fontSize' ,14);
				txt.setStyle('fontFamily' ,'Arial');
				//txt.width = (txt_history.width-10)*0.80;*/
				
				

				//lbl2.setStyle('color' ,'#25bbdb');
				
				var linemsg:Text = new Text();
				
				linemsg.htmlText = "<font color='#25bbdb' font-size='14'>"+fromUser+" : </font><font font-size='14' color='#00000'>"+msg+"</font>";
				linemsg.setStyle('paddingLeft',5);
				linemsg.setStyle('paddingRight',5);
				linemsg.width = txt_history.width-10;
				var grow:GridRow = new GridRow();
				var gitem1:GridItem = new GridItem();
				//var gitem2:GridItem = new GridItem();
				gitem1.addChild(linemsg);
				//gitem1.addChild(txt);
				//gitem2.addChild(txt);
				
				gitem1.horizontalScrollPolicy = 'off';
				//gitem2.horizontalScrollPolicy = 'off';
				//gitem2.width = gitem2.parent.width*0.9;
				
				///////////////////////
				grow.addChild(gitem1);
				//grow.addChild(gitem2);
				grow.width = txt_history.width-5;
				grow.setStyle('paddingTop',1);
				//grow.setStyle('paddingBottom',1);
				//grow.setStyle('left',5);
				
				grow.horizontalScrollPolicy = 'off'
				//if(txt_history.numChildren%2==0)  grow.setStyle('backgroundColor','#e8f9fe');
				////////////////////////////////
				//grow.addChild(gitem2);
				txt_history.addChild(grow);
				
				
				//txt_history.validateProperties();
				txt_history.validateNow();
				txt_history.verticalScrollPosition = txt_history.verticalScrollBar.maxHeight;
			}
			/***************************************************************************/
			private var vi:MyVideo;
			private var vidListAC:Array;      //Array<Video>
			private var nameListAc:Array;
			private var snd:Sound;
			private var cam:Camera;
			private var mic:Microphone;
			private var inStream:Array; //Array<NetStream>
			private var outStream:NetStream;
			//private var broadCasting = false;
			
			protected function videoStart():void
			{
				if( true == ncSuccess )
				{
					//Begins recording
					beginRec();
					getVideoLocal();
				}
				else
				{
//					logger.addLoggingMessage("Cannot start video ...");
				}
			}
			protected function videoStop():void
			{
//				logger.addLoggingMessage("Stopping video ...");
				endRec();
				stopVideoLocal();
			}
			///////////////////  Recording Part   ///////////////////
			
			//Start recording
			protected function beginRec():void
			{
				outStream = new NetStream(nc);
				//outStream.client = this;
				
//				logger.addLoggingMessage("Bigin Recording ...");
				
				cam = Camera.getCamera();
				if(cam!=null){
					cam.setMode(320,240,15);//Set size and Frame Rate
					cam.setQuality(20000,80);//Set video quality
					
					outStream.attachCamera(cam);//activate video
				}
				
				
				mic = Microphone.getMicrophone();
				if(mic!=null){
					mic.setUseEchoSuppression(true);
					//mic.setLoopBack(true);
					//var level:int = mic.;
					//logger.addLoggingMessage("activity level: "+ level);
					mic.setSilenceLevel(15);
					mic.gain = micVol.value;
					outStream.attachAudio(mic);
				}
				
				outStream.publish(this.clientid,"live");
				
				//Add himself to the video list
//				logger.addLoggingMessage("Client ID is: " + this.clientid+"  Topic ID is: "+ this.topicid);
				nc.call("send_msgtoroom", null, this.username, this.topicid, "I am adding video list");
				nc.call("addVideoList", null, this.clientid, this.topicid);
				nc.call("testMethod", null, this.clientid, this.topicid);
//				logger.addLoggingMessage("++++Video List Added");
				
			}
			
			//Stop recording
			private function endRec():void
			{
//				logger.addLoggingMessage("End Recording ...");
				outStream.close();
				//remove himself to the video list
				nc.call("send_msgtoroom", null, this.username, this.topicid, "I am adding video list");
				nc.call("removeVideoList", null, this.clientid, this.topicid);
//				logger.addLoggingMessage("++++Video List Removed");
				
				//vi = null;
				
				
			}
			
			///////////////////\/\/\/\Recording Part/\/\/\/\//////////////////
			
			///////////////////       Displaying Part/     ///////////////////
			/*
			* Display local video
			*/
			//public var videoLocal:VideoDisplay;
			
			private function getVideoLocal():void
			{
				
//				logger.addLoggingMessage("Getting Local Video ... ");
				
				vi.attachCamera(this.cam);
				
				//videoLocal.addChild(vi);
				//videoLocal.attachCamera(this.cam);
				//doDisplay();
			}
			
			private function stopVideoLocal():void
			{
				// Don't show local video 
				//videoLocal.removeChild(vi);
				//videoLocal.attachCamera(null);
				//videoLocal.mx_internal::videoPlayer.clear();
				//videoLocal.invalidateProperties();
				
				vi.attachCamera(null);
				vi.clear();
//				logger.addLoggingMessage("Video removed ...");
				
				//doDisplay();
			}
			[ArrayElementType("mx.controls.VideoDisplay")]
			private var dispListAC:Array=null;
			
			private var dispUnitListAC:Array = null;
			private var dispRowGroupAC:Array = null; //Put HGroup in it
			
			private function doDisplay():void
			{
//				logger.addLoggingMessage("Do display ...");
				
				var dispRowCapacity:int = 4;
				
				//Make all netstreams in inStream stop playing
				if(null!=inStream&&inStream.length>0){
					for(var i:int=0;i<inStream.length;i++){
						(inStream[i] as NetStream).close();
					}
				}
				inStream = new Array();
				
				if(null!=vidListAC&&vidListAC.length>0){
					for(var i:int=0;i<vidListAC.length;i++){
						(vidListAC[i]as Video).clear();
					}
				}
				vidListAC = new Array();
				nameListAc = new Array();
				
				dispRowGroupAC = new Array();
				
				while(videoGroup.numElements>0){
					videoGroup.removeElementAt(0);
				}
//				logger.addLoggingMessage("row group removed");
				
				vidListAC.push(vi);
				nameListAc.push(this.username);
				if(othervideoSwitch.selected){
					//Get video array of peers
					for(var i:int=0; i<videoListAC.length;i++){
//						logger.addLoggingMessage("video list is not empty.");
						if( this.clientid != videoListAC[i]){
//							logger.addLoggingMessage("There exist other peers on video list");
							
							var newInStream:NetStream = new NetStream(nc);
							//new Sound
							newInStream.play(videoListAC[i]as String);
							
							
							inStream.push(newInStream);
							
							/* var newVid:Video = new Video();
							newVid.width = 140;
							newVid.height = 105;
							newVid.smoothing = true; */
							var newVid:MyVideo = new MyVideo();
							newVid.attachNetStream(newInStream);
							
							vidListAC.push(newVid);		
							
							nameListAc.push((talkerListSO.data[ "talkerListAC" ])[i][1]);
						}
					}
//					logger.addLoggingMessage("video array done!");
//					logger.addLoggingMessage("vidListAC: " + vidListAC.length);
				}
				
				
				
				//Assgin video array to VideoDisplay array
				//dispListAC = new Array();
				//logger.addLoggingMessage("dispListAC new!");
				//videoLocal.setStyle("radiusX",10);
				//videoLocal.setStyle("radiusY",10);
				//logger.addLoggingMessage("videoLocal corner radius set successfully!");
				
				//dispListAC.push(videoLocal);//Show local Video first
				//logger.addLoggingMessage("videoLocal pushed!");
				/* for(var i:int = 0; i<vidListAC.length;i++){
					var vDisp:VideoDisplay = new VideoDisplay();
					//Set the properties of videodisplays
					vDisp.width = (vidListAC[i] as Video).width;
					vDisp.height = (vidListAC[i] as Video).height;

					vDisp.addChild(vidListAC[i]as Video);
					//vDisp.volume = spVol.value;
					logger.addLoggingMessage("volume: " + vDisp.volume);
					vDisp.top = 0;
					
					dispListAC.push(vDisp);
				} */
				//logger.addLoggingMessage("dispListAC done!"); 
				////////////////////////////////////////////////////////////
				dispUnitListAC = new Array();
				
				for(var i:int=0;i<vidListAC.length;i++){
					var tempUnit:VideoDispUnit = new VideoDispUnit();
					
					try{
						//var tmpC:Canvas = new Canvas();
						//tmpC.width = 160;
						//tmpC.height = 120;
						//tmpC.setStyle("cornerRadius",20);
						//(dispListAC[i] as VideoDisplay).setStyle("cornerRadius",20);
						//(dispListAC[i] as VideoDisplay).mask = tempUnit.c3;
						//logger.addLoggingMessage("The cornerRadius of videodisplay set successfully!");
						
						//tempUnit.g1.addElementAt((dispListAC[i] as VideoDisplay),1);
						tempUnit.vd.addChild(vidListAC[i]as Video);
						
						//tempUnit.internalVD.addChild(vi);
					}catch(e:Error){
//						logger.addLoggingMessage(e.toString());
					}
					//tempUnit.userName.text = "username"+(i+1);
					//for(var j:uint; j<talkerListAC.length; j++){
						//if(videoListAC[i] == ((talkerListSO.data[ "talkerListAC" ])[j])[0])
							tempUnit.userName.text = nameListAc[i];//"username"+(i+1);
					//}
					
					dispUnitListAC.push(tempUnit);
				}
				//Assign VidDisplay list to rowGroup and push rowGroup into dispRowGroupAC
				var newGroup:HGroup = null;
				//logger.addLoggingMessage("dispListAC.length: "+dispListAC.length);
				for(var i:int=0; i<dispUnitListAC.length; i++){
					if(i%dispRowCapacity == 0){
						if(newGroup!=null){
							dispRowGroupAC.push(newGroup);
						}
						newGroup = new HGroup();
						
						newGroup.gap = 11;
						newGroup.paddingLeft = 16;
						newGroup.paddingRight = 16;
						newGroup.paddingTop = 9;
						newGroup.paddingBottom = 9;
						//paddingTop="9"  paddingBottom="9" paddingLeft="5" paddingRight="0"
						//newGroup.paddingLeft = 5;
						//newGroup.paddingTop = 5;
					}
					//logger.addLoggingMessage("before addChild ...");
					newGroup.addElement(dispUnitListAC[i] as VideoDispUnit);
				}
				//logger.addLoggingMessage("addChild success!");
//				logger.addLoggingMessage("addElement success!");
				if(newGroup!=null){
					dispRowGroupAC.push(newGroup);
				}
//				logger.addLoggingMessage("VideoDisplay RowGroup Array done!");
				///////////////////////////////////////////////////////////////////
				
				//logger.addLoggingMessage("we wanna show it at videoGroup");
//				logger.addLoggingMessage("dispRowGroupAC.length: " + dispRowGroupAC.length);
				for(var i:int = 0; i<dispRowGroupAC.length;i++){
					videoGroup.addElement(dispRowGroupAC[i]as HGroup);
					
//					logger.addLoggingMessage("videoGroup numElement " + videoGroup.numElements);
					//logger.addLoggingMessage("videoGroup Element id: " + (dispRowGroupAC[i]as HGroup).id);
				}
				
			}
			
			///////////////////\/\/\/\Displaying Part/\/\/\///////////////////
			
			//var micVolslider:VSlider;
			private function spVolHandler():void
			{
//				logger.addLoggingMessage("spVolHandler");
				for(var i:int=0;i<inStream.length;i++){
					//((dispListAC[i]as VideoDisplay).getChildAt(0)as Video). = spVol.value;
					(inStream[i]as NetStream).soundTransform = new SoundTransform(spVol.value);
					
					
					//logger.addLoggingMessage("Volume " + i + ": "+ (dispListAC[i]as VideoDisplay).volume);
					//logger.addLoggingMessage("VideoLocal volume: "+ videoLocal.volume);
				}
//				logger.addLoggingMessage("complete without error");
			}
			
			//public var icon1:Image;
			//public var icon2:Image;
			//public var icon3:Image;
			
			public var icon:String;
			//public var imageListAC:Array;
			[Bindable] public var talkerUnitListAC:Array;
			
			private function rebuild_talker_list_unit_list():void
			{
				
				//var icon:Array = new Array({icon1,icon2,icon3});
				talkerUnitListAC = new Array();
				//imageListAC = new Array();
				for(var i:int=0; i<talkerListAC.length;i++){
					//imageListAC.push(icon);
//					logger.addLoggingMessage("talkerListAC["+i+"]: "+talkerListAC[i]);
					//talkerUnitListAC.push( {name:talkerListAC[i],icon:"http://127.0.0.1:9000/image/"+talkerListAC[i]} );
					talkerUnitListAC.push( {name:talkerListAC[i],icon:"http://www.talkabouthealth.com:9000/image/"+talkerListAC[i]} );
				}
				//logger.addLoggingMessage("imageListAC length: "+imageListAC.length);
				//talkerUnitListAC.name = talkerListAC;
				//talkerUnitListAC.icon = imageListAC;
			}
			[Embed(source="images/popup_logo.gif")]
			[Bindable]
			public var imgLogo:Class;

			[Embed(source="images/popup_close.gif")]
			[Bindable]
			public var imgClose:Class;
			
			private function closeIE():void{
				//logger.addLoggingMessage("Button clicked!");
				navigateToURL(new URLRequest("javascript:window.opener = null; window.open(' ', '_self', ' '); window.close()"),"_parent");
				//logger.addLoggingMessage("Button clicked! no error");
			}
			
			[Bindable]
			private var txt_msgToast:String = MessageContent.TXT_MSG_TOAST;
			private function txt_msgFocusOut():void{
				if(txt_msg.text == ""){
					txt_msg.text = txt_msgToast;
				}
				txt_msg.setStyle("color","#000000"); 
			}
			
			private function txt_msgFocusIn():void{
				if(txt_msg.text == txt_msgToast){
					txt_msg.text = "";
				}
				txt_msg.setStyle("color","#0B333C"); //black blue 
			}
			
			/////////////////////////////////////////////////////////////////////////
			//     set a Timer to tell first comer that seaching for peers failed
			/////////////////////////////////////////////////////////////////////////
			private var alrtTimer:Timer;
			private function ontimecheck(e:TimerEvent):void
			{
				//logger.addLoggingMessage("Timer triggered!");
				//logger.addLoggingMessage("firstUser: "+ firstUser);
				if(firstUser)
				{
					var msg:Text = new Text();
					msg.text = MessageContent.APPOLOGY;
					msg.setStyle('fontSize' ,12);
					//msg.setStyle('fontStyle' ,FontStyle.ITALIC);
					msg.setStyle('fontFamily' ,'Arial');
					msg..setStyle('fontWeight',FontWeight.BOLD);
					
					//logger.addLoggingMessage("firstUser: "+ firstUser);
					var grow:GridRow = new GridRow();
					var gitem:GridItem = new GridItem();
					gitem.addChild(msg);
					
					///////////////////////
					grow.addChild(gitem);
					grow.width = txt_history.width;
					grow.horizontalScrollPolicy = 'off';
					grow.setStyle('paddingTop',1);
					grow.setStyle('paddingBottom',1);
					//if(txt_history.numChildren%2==0)  grow.setStyle('backgroundColor','#e8f9fe');
					grow.setStyle('backgroundColor','#e8f9fe');
					////////////////////////////////
					txt_history.addChild(grow);
					
				}
				
			}

			protected function txt_msg_keyDownHandler(event:KeyboardEvent):void
			{
				if((event.ctrlKey == true)&&(event.charCode==13)) 
				{ 
					callLater(function():void{
						var msg:String = txt_msg.text;
						var part1:String = msg.substring(0, txt_msg.selectionBeginIndex);
						var part2:String = msg.substring(txt_msg.selectionEndIndex, 0x7fffffff);
						var selIndex:int = txt_msg.selectionBeginIndex + 1;   
						txt_msg.text = part1 + "\n" + part2;   
						txt_msg.setSelection(selIndex,selIndex);
					});
				}else if((event.ctrlKey == false)&&(event.charCode==13)) 
				{
					event.preventDefault();
					callLater(enter_txtevent,null); 
				}
			}

		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<comm:CommAppContext contextView="{this}" />
	</fx:Declarations>
	
	<s:layout>
		<s:VerticalLayout paddingLeft="5" paddingRight="5" paddingTop="5" paddingBottom="5"/>
	</s:layout>
	
	<!--<logger:LoggerModule id="logger" height="75" />-->
	
	<s:VGroup width="100%">
		<s:Group width="100%" height="31" >
			
			<mx:Image source="{imgLogo}" width="233" height="31"/>
			<!--<mx:Image source="{imgClose}" width="100%" height="100%" horizontalAlign="right"
					  click="closeIE()"  />-->
			<mx:Button icon="{imgClose}" click="closeIE()" width="31" height="31" alpha="1.0" fillColors="[#FFFFFF, #FFFFFF, #FFFFFF, #FFFFFF]"  cornerRadius="14" fillAlphas="[1.0, 1.0, 1.0, 1.0]" y="0" x="707" labelPlacement="left" borderColor="#FFFFFF" themeColor="#FFFFFF"/> 
		</s:Group>
		
		<s:Group width="100%">
			<s:layout>
				<s:BasicLayout/>
			</s:layout>
			<mx:Canvas width="100%" height="100%" styleName="canvas1"/>
			<s:HGroup id="videoGroup"  top="0"  left="0" gap="50"/>
		</s:Group>
		
	</s:VGroup>
	<s:HGroup width="100%" >
		<!--<s:Button label="StartUp" id="btn_startup" click="btn_startup_clickHandler(event)"/>-->
		<s:Group width="75%" height="100%">
			<s:layout>
				<s:BasicLayout/>
			</s:layout>
			<s:VGroup paddingLeft="0" paddingRight="5" paddingTop="5" paddingBottom="5" width="100%" height="100%" x="0" y="0">
					
				<s:HGroup verticalAlign="bottom">
					<s:Label text="Topic: " fontFamily="Arial" fontSize="12" color="#000000" verticalAlign="bottom" />
					<s:Label id="topicTitle" styleName="topicTitle" height="15" verticalAlign="bottom" color="#000000"/>
				</s:HGroup>
				<mx:VBox id="text_VBox" width="100%" height="100%" verticalScrollPolicy="off" horizontalScrollPolicy="off" borderStyle="solid" horizontalAlign="center" paddingBottom="9" verticalGap="0">
					<mx:Canvas borderColor="#B6B6B6" borderStyle="solid" width="100%" height="194" horizontalScrollPolicy="off" verticalScrollPolicy="off">
						<mx:Grid width="100%" height="194" id="txt_history" enabled="true" fontFamily="Arial"  fontSize="14" verticalCenter="0" verticalGap="0" horizontalScrollPolicy="off"  horizontalCenter="0" styleName="chatarea"/>
						
					</mx:Canvas>
					
					<s:HGroup id="cntrl_Group" width="100%" paddingRight="5">
						<mx:CheckBox id="myvideoSwitch"  paddingTop="4" paddingLeft="10" label="Your Video On" 
									 change="if(myvideoSwitch.selected == true) videoStart();
									 else videoStop();" />
						<mx:CheckBox id="othervideoSwitch"  paddingTop="4" label="Other Members Video On" 
									 change=" doDisplay();" />
						
						<mx:Label text="Vol:" paddingTop="4" paddingLeft="0" fontWeight="bold" fontFamily="Arial" fontStyle="italic" fontSize="14" textAlign="right" width="90" id="volLabel"/>
						
						<mx:Label text=":Mic" paddingTop="4" paddingLeft="0" paddingRight="5" fontWeight="bold" fontFamily="Arial" fontStyle="italic" fontSize="14" textAlign="right" width="147" id="micLabel"/>
										
					</s:HGroup>
					
					<mx:TextArea id="txt_msg" width="97%" height="50"  keyDown="txt_msg_keyDownHandler(event)" horizontalCenter="0" verticalCenter="2" fontFamily="Arial" fontStyle="normal" fontSize="12"  borderColor="#CCCCCC" borderStyle="solid" textIndent="1" fontWeight="normal" text="{txt_msgToast}" focusOut="txt_msgFocusOut();" focusIn="txt_msgFocusIn()" color="#000000" bottom="10" />
					
				</mx:VBox>
				
			</s:VGroup>
			<s:VolumeBar id="spVol" 
					   minimum="0.0"
					   maximum="1.0"
					   value="0.5"
					   snapInterval="0.01"
					   liveDragging="true"
					   x="{text_VBox.x+cntrl_Group.x+volLabel.x+volLabel.width +5}"
					   y="{text_VBox.y+cntrl_Group.y+othervideoSwitch.y}"
					   skinClass="com.tah.comm.TahVolumeSkin"
					   thumbRelease="spVolHandler()"/>
			<s:VolumeBar id="micVol" 
					   minimum="0"
					   maximum="100"
					   value="0"
					   snapInterval="1"
					   liveDragging="true"
					   x="{text_VBox.x+cntrl_Group.x+micLabel.x+70}"
					   y="{text_VBox.y+cntrl_Group.y+othervideoSwitch.y}"
					   thumbRelease="if(mic!=null)mic.gain = micVol.value"   skinClass="com.tah.comm.MicSkin"/>
			
			
		</s:Group>
		<s:Group  width="25%" height="100%">
			<s:layout>
				<s:VerticalLayout paddingTop="5"/>
			</s:layout>
			<s:Label paddingLeft="5" paddingRight="0" paddingTop="5" paddingBottom="5" id="welcomeUser" height="15"   styleName="welcomeUser" color="#000000"/>
			<!--<mx:Image source="photo/1.png"/>-->
			<mx:DataGrid paddingLeft="5" paddingRight="0" paddingTop="0" paddingBottom="5" height="288" width="100%" dataProvider="{talkerUnitListAC}" rowHeight="48" resizableColumns="false" verticalGridLines="false" dragEnabled="false" draggableColumns="false" horizontalCenter="0" verticalCenter="0" fontFamily="Arial" borderColor="#B6B6B6" headerHeight="0" fontSize="12" styleName="topicTitle" alternatingItemColors="[#E8F9FE, #FFFFFF]">
				<mx:columns>
					<mx:DataGridColumn  paddingLeft="2"  headerText="Icon" width="48" >
						<mx:itemRenderer>
							<fx:Component>	
								<mx:Image source="{data.icon}"  height="48" width="48" smoothBitmapContent="true" />
							</fx:Component>
						</mx:itemRenderer>
					</mx:DataGridColumn>
					<mx:DataGridColumn headerText="Name" width="130" textAlign="left">
						<mx:itemRenderer>
							<fx:Component>
								<mx:Label text="{data.name}" height="48" paddingLeft="2" paddingTop="12" fontSize="14"/>
							</fx:Component>
						</mx:itemRenderer>
					</mx:DataGridColumn>
				</mx:columns>		
			</mx:DataGrid>
			<!--<mx:Canvas height="270" width="180" cornerRadius="12" borderStyle="solid" borderThickness="4" verticalScrollPolicy="off" horizontalScrollPolicy="off" borderColor="#90CDF7" horizontalCenter="0" verticalCenter="0"/>-->
			
			
			
		</s:Group>
	</s:HGroup>
	<s:Group>
		<s:layout>
			<s:BasicLayout/>
		</s:layout>
		<s:Label text="Warning:" color="#000000" fontFamily="Arial" fontSize="11"/>
		<s:Label width="740"
				 text="                  All content on this site is informational and is not a substitute for professional medical advice. Always seek the advice of your physician or other qualified health provider with questions regarding your health." fontFamily="Arial" color="#949494" left="0" top="0"/>
	</s:Group>	
</s:Application>
