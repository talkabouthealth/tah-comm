<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:comm="com.tah.comm.*"
			   xmlns:view="com.tah.comm.modules.media.view.*"
			   xmlns:logger="com.tah.comm.modules.logger.*" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" width="949"  height="2000"
			   xmlns:textchat="com.tah.comm.modules.textchat.*"
			   xmlns:core="com.tah.comm.modules.core.*" 
			   xmlns:nc="flash.net.NetConnection"
			   
			   creationComplete="init()">
	<fx:Script>
		<![CDATA[
			import com.tah.comm.common.events.CommAppEvent;
			
			import flash.events.NetStatusEvent;
			import flash.net.SharedObject;
			import flash.text.engine.FontWeight;
			
			import flashx.textLayout.container.ContainerController;
			import flashx.textLayout.elements.ParagraphElement;
			import flashx.textLayout.elements.SpanElement;
			import flashx.textLayout.elements.TextFlow;
			import flashx.textLayout.factory.TextFlowTextLineFactory;
			
			import mx.collections.ArrayCollection;
			import mx.controls.VideoDisplay;
			import mx.states.AddChild;
			import mx.utils.ObjectUtil;
			
			import spark.components.Group;
			import spark.utils.TextFlowUtil;
			
			[Bindable] private var talkerListAC:Array;
			private var videoListAC:Array;
			
			private var ncSuccess:Boolean;
			
			public var talkerListSO:SharedObject;
			public var videoListSO:SharedObject;
			public var userid:String;
			public var username:String;
			public var topicid:String;
			public var topic:String;
			public var clientid:String;
			public var nc:NetConnection;
			
			private function init():void
			{
				//FLASHVARS CODE
				var paramObj:Object = this.parameters;
				
				this.userid = paramObj["userid"];
				this.username = paramObj["username"];
				this.topicid = paramObj["topicid"];
				this.topic = paramObj["topic"];
				this.clientid = null;
				
				// new netconnection
				nc = new NetConnection( );
				nc.client = this;
				
				// set encoding to old amf
				nc.objectEncoding = ObjectEncoding.AMF3;
				
				// netstatus event listening
				nc.addEventListener( NetStatusEvent.NET_STATUS , netStatus );
				
				// connect to red5, passing false as parameter
				nc.connect( "rtmp://localhost/tah-commapp-server/" + topicid, userid, username, topicid, topic );
				topicTitle.text = "Topic: " + topic;
				welcomeUser.text = "Welcome " + username;
				
				//set the local VideoDisplay
				videoLocal = new VideoDisplay();
				videoLocal.width = 160;
				videoLocal.height = 120;
				
				doDisplay();
			}
			
			private function netStatus ( event:NetStatusEvent ):void
			{
				if( event.info.code == "NetConnection.Connect.Success" ) {
					ncSuccess = true;
					logger.addLoggingMessage("NC Success");
					talkerListSO = SharedObject.getRemote("talkerListSO-" + topicid, nc.uri, false);
					talkerListSO.connect(nc);
					talkerListSO.addEventListener(SyncEvent.SYNC, talkerListSync);
					//talkerListSO.client = this;
					logger.addLoggingMessage("SO Success");
					
					/*****************************************
					 * *Target: new SharedObject of video list
					 * *Added by: Situ
					 * ***************************************/
					videoListSO = SharedObject.getRemote("videoListSO-" + topicid,nc.uri,false);
					videoListSO.connect(nc);
					videoListSO.addEventListener(SyncEvent.SYNC, videoListSync);
					logger.addLoggingMessage("video SO Success");
					
				} else {
					ncSuccess = false;
					// connection failed
					logger.addLoggingMessage(event.info.code);
				}
			}
			private function talkerListSync ( event:SyncEvent ):void
			{
				logger.addLoggingMessage("++++Talker List Sync");
				
				var tmpArray:Array = new Array();
				var listName:String = "talkerListAC";
				for (var i:int = 0; i < (talkerListSO.data[ listName ]).length; i++ ) {
					tmpArray.push(((talkerListSO.data[ listName ])[i])[1]);
					
					// record the clientID generated by RED5 Server
					if(null == this.clientid){
						if(this.username == ((talkerListSO.data[ listName ])[i])[1]){
							this.clientid = ((talkerListSO.data[ listName ])[i])[0];
							logger.addLoggingMessage("client id: "+this.clientid+"   username: "+this.username);
						}
					}
				}
				//talkerListAC = new Array();
				talkerListAC = tmpArray;
				
			}
			
			/**************************************************************
			 * *Synchronize video list
			 * *Added by: Situ
			 * ************************************************************/
			
			public function videoListSync(event:SyncEvent):void
			{
				logger.addLoggingMessage("++++Video List Sync");
				logger.addLoggingMessage(videoListSO.toString());
				
				var tmpArray:Array;
				var listName:String = "videoListAC";
				logger.addLoggingMessage("vid syc step 1 ...");
				tmpArray = new Array();
				
				
				for (var i :int= 0; i < (videoListSO.data[ listName ]).length; i++ ) {
					tmpArray.push((videoListSO.data[ listName ])[i]);
				}
				logger.addLoggingMessage("vid syc step 2 ...");
				videoListAC = null;
				videoListAC = tmpArray;	
				/* if(videoListAC == null) {
					logger.addLoggingMessage("videoListAC is null");
				}else {
					logger.addLoggingMessage("The length of videoListAC is: " + videoListAC.length);
				} */
				
				logger.addLoggingMessage("Video List: ");
				for(var i:int =0 ; i<videoListAC.length ;i++){
					logger.addLoggingMessage(i+": "+videoListAC[i]);
				}
				doDisplay();
			}
			
			/*protected function btn_startup_clickHandler(event:MouseEvent):void
			{
			this.dispatchEvent(new CommAppEvent(CommAppEvent.STARTUP));
			}*/
			
			protected function enter_txtevent(event:Event):void
			{
				nc.call("send_msgtoroom", null, this.username, this.topicid, txt_msg.text);
				txt_msg.text = "";
			}
			public function receivePublicMsg(fromUser:String, msg:String):void {
				var para:ParagraphElement = new ParagraphElement(); 
				var span1:SpanElement = new SpanElement(); 
				var span2:SpanElement = new SpanElement(); 
				span1.text = fromUser + ": "; 
				span1.fontWeight = FontWeight.BOLD;
				span2.text = msg;
				para.addChild(span1); 
				para.addChild(span2);
				txt_history.textFlow.addChild(para);
			}
			/***************************************************************************/
			private var vi:Video;
			private var vid:Array;      //Array<Video>
			private var snd:Sound;
			private var cam:Camera;
			private var mph:Microphone;
			private var inStream:Array; //Array<NetStream>
			private var outStream:NetStream;
			//private var broadCasting = false;
			
			protected function videoStart():void
			{
				if( true == ncSuccess )
				{
					//Begins recording
					beginRec();
					getVideoLocal();
				}
				else
				{
					logger.addLoggingMessage("Cannot start video ...");
				}
			}
			protected function videoStop():void
			{
				logger.addLoggingMessage("Stopping video ...");
				stopVideoLocal();
				endRec();
			}
			///////////////////  Recording Part   ///////////////////
			
			//Start recording
			protected function beginRec():void
			{
				logger.addLoggingMessage("Bigin Recording ...");
				cam = Camera.getCamera();
				cam.setMode(320,240,30);//Set size and Frame Rate
				cam.setQuality(0,50);//Set video quality
				
				mph = Microphone.getMicrophone();
				mph.rate = 11;
				mph.setUseEchoSuppression(true);
				mph.setLoopBack(false);
				
				outStream = new NetStream(nc);
				outStream.client = this;
				
				outStream.attachCamera(cam);//activate video
				outStream.attachAudio(mph);
				outStream.publish(this.clientid,"live");
				
				//Add himself to the video list
				logger.addLoggingMessage("Client ID is: " + this.clientid+"  Topic ID is: "+ this.topicid);
				nc.call("send_msgtoroom", null, this.username, this.topicid, "I am adding video list");
				nc.call("addVideoList", null, this.clientid, this.topicid);
				nc.call("testMethod", null, this.clientid, this.topicid);
				logger.addLoggingMessage("++++Video List Added");
				
			}
			
			//Stop recording
			private function endRec():void
			{
				logger.addLoggingMessage("End Recording ...");
				outStream.close();
				//remove himself to the video list
				nc.call("send_msgtoroom", null, this.username, this.topicid, "I am adding video list");
				nc.call("removeVideoList", null, this.clientid, this.topicid);
				logger.addLoggingMessage("++++Video List Removed");
				
				cam = null;
				vi = null;
				
				doDisplay();
				
			}
			
			///////////////////\/\/\/\Recording Part/\/\/\/\//////////////////
			
			///////////////////       Displaying Part/     ///////////////////
			/*
			* Display local video
			*/
			public var videoLocal:VideoDisplay;
			
			private function getVideoLocal():void
			{
				
				logger.addLoggingMessage("Getting Local Video ... ");
				vi = new Video();
				vi.width = videoLocal.width;
				vi.height = videoLocal.height;
				vi.smoothing = true;
				vi.attachCamera(this.cam);
				
				videoLocal.addChild(vi);
				doDisplay();
			}
			
			private function stopVideoLocal():void
			{
				// Don't show local video 
				videoLocal.removeChild(vi);
				logger.addLoggingMessage("Video removed ...");
			}
			
			private var dispListAC:Array=null;
			private var dispRowGroupAC:Array = null; //Put HGroup in it
			
			private function doDisplay():void
			{
				logger.addLoggingMessage("Do display ...");
				/* logger.addLoggingMessage("video 0: "+(videoGroup.getChildAt(0)as VideoDisplay).id);
				logger.addLoggingMessage("video 1: "+(videoGroup.getChildAt(1)as VideoDisplay).id);
				logger.addLoggingMessage("video 2: "+(videoGroup.getChildAt(2)as VideoDisplay).id); */
				
				var dispRowCapacity:int = 4;
				//var groupCnt:int = 0;
				//var dispRowNum = videoListAC.length/dispRowCapacity + 1;
				inStream = new Array();
				vid = new Array();
				
				while(videoGroup.numElements>0){
					videoGroup.removeElementAt(0);
					logger.addLoggingMessage("row group removed");
				}
				
				dispRowGroupAC = new Array();
				inStream = new Array();
				
				//Get video array of peers
				for(var i:int=0; i<videoListAC.length;i++){
					if( this.clientid != videoListAC[i]){
						logger.addLoggingMessage("video list is not empty.")
										
						var newInStream:NetStream = new NetStream(nc);
						newInStream.play(videoListAC[i]as String);
						inStream.push(newInStream);
						
						var newVid:Video = new Video();
						newVid.width = 160;
						newVid.height = 120;
						newVid.smoothing = true;
						newVid.attachNetStream(newInStream);
						vid.push(newVid);		
						
					}
				}
				logger.addLoggingMessage("video array done!");
				
				//Assgin video array to VideoDisplay array
				dispListAC = new Array();
				logger.addLoggingMessage("dispListAC new!");
				dispListAC.push(videoLocal);//Show local Video first
				logger.addLoggingMessage("videoLocal pushed!");
				for(var i:int = 0; i<vid.length;i++){
					var vDisp:VideoDisplay = new VideoDisplay();
					vDisp.width = (vid[i] as Video).width;
					vDisp.height = (vid[i] as Video).height;
					vDisp.addChild(vid[i]as Video);
					dispListAC.push(vDisp);
				}
				logger.addLoggingMessage("dispListAC done!");
				//Assign VidDisplay list to rowGroup and push rowGroup into dispRowGroupAC
				var newGroup:HGroup = null;
				logger.addLoggingMessage("dispListAC.length: "+dispListAC.length);
				for(var i:int=0; i<dispListAC.length; i++){
					if(i%dispRowCapacity == 0){
						if(newGroup!=null){
							dispRowGroupAC.push(newGroup);
						}
						var newGroup:HGroup = new HGroup();
						newGroup.gap = 5;
						newGroup.paddingLeft = 5;
						newGroup.paddingTop = 5;
					}
					//logger.addLoggingMessage("before addChild ...");
					newGroup.addElement(dispListAC[i] as VideoDisplay);
				}
				//logger.addLoggingMessage("addChild success!");
				logger.addLoggingMessage("addElement success!");
				if(newGroup!=null){
					dispRowGroupAC.push(newGroup);
				}
				logger.addLoggingMessage("VideoDisplay RowGroup Array done!");
				///////////////////////////////////////////////////////////////////
				
				//logger.addLoggingMessage("we wanna show it at videoGroup");
				logger.addLoggingMessage("dispRowGroupAC.length: " + dispRowGroupAC.length);
				for(var i:int = 0; i<dispRowGroupAC.length;i++){
					videoGroup.addElement(dispRowGroupAC[i]as HGroup);

					logger.addLoggingMessage("videoGroup numElement " + videoGroup.numElements);
					//logger.addLoggingMessage("videoGroup Element id: " + (dispRowGroupAC[i]as HGroup).id);
				}
				
			}
			
			///////////////////\/\/\/\Displaying Part/\/\/\///////////////////

			

		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<comm:CommAppContext contextView="{this}" />
	</fx:Declarations>
	<s:layout>
		<s:VerticalLayout paddingLeft="5" paddingRight="5" paddingTop="5" paddingBottom="5"/>
	</s:layout>
	
	<logger:LoggerModule id="logger"/>
	<s:HGroup>
		<!--<s:HGroup left="0" >
			<s:VGroup width="50">
				<s:Button label="Start" click="videoStart()" width="50"/>
				<s:Button label="Stop"  click="videoStop()" width="50"/>
			</s:VGroup>
			<s:VideoDisplay id="videoLocal" width="160" height="120" right="0"/>
		</s:HGroup>	-->
		<s:VGroup id="videoGroup" left="0">
			<!--<s:VideoDisplay id="videoDisplay0" width="200" height="150"/>
			<s:VideoDisplay id="videoDisplay1" width="200" height="150"/>
			<s:VideoDisplay id="videoDisplay2" width="200" height="150"/>-->
		</s:VGroup>		
	</s:HGroup>
	<s:HGroup width="100%" height="100%">
		<!--<s:Button label="StartUp" id="btn_startup" click="btn_startup_clickHandler(event)"/>-->
		<s:VGroup paddingLeft="5" paddingRight="5" paddingTop="5" paddingBottom="5" width="100%" height="100%">
			<s:HGroup>
				<!--<mx:Image id="logo" source="@Embed(source='assets/tahlogo.gif')" width="140" height="20"/>-->
				<s:Label id="topicTitle" />
			</s:HGroup>	
			<s:TextArea width="100%" height="200" id="txt_history" editable="false" enabled="true" />
			<s:HGroup>
				<mx:CheckBox id="videoSwitch" width="100" label="Video On/Off" 
							 change="if(videoSwitch.selected == true) videoStart();
							 else videoStop();"/>
				<mx:CheckBox width="100" label="Voice On/Off"/>
				<mx:Button label="Speaker Volume"/>
				<mx:Button label="Microphone Volume"/>
			</s:HGroup>
			<s:TextInput width="100%" height="25" id="txt_msg" enter="enter_txtevent(event)"/>
		</s:VGroup>
		<s:VGroup paddingLeft="5" paddingRight="5" paddingTop="5" paddingBottom="5" width="100%" height="100%">
			<s:Label id="welcomeUser" />
			<mx:DataGrid height="260" width="178" dataProvider="{talkerListAC}" >
				<mx:columns>
					<!--<mx:DataGridColumn headerText="Talkers" dataField="username" id="talkerlist"/>-->
					<mx:DataGridColumn id="talkerlist"/>
				</mx:columns>
			</mx:DataGrid>
		</s:VGroup>
	</s:HGroup>
</s:Application>
