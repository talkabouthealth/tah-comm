<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:comm="com.tah.comm.*"
			   xmlns:components="components.*"
			   xmlns:view="com.tah.comm.modules.media.view.*"
			   xmlns:logger="com.tah.comm.modules.logger.*" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" width="949"  height="2000"
			   xmlns:textchat="com.tah.comm.modules.textchat.*"
			   xmlns:core="com.tah.comm.modules.core.*" 
			   xmlns:nc="flash.net.NetConnection"
			   
			   creationComplete="init()">
	<fx:Style source="CommApp.css"/>
	<fx:Script>
		<![CDATA[
			import com.tah.comm.common.events.CommAppEvent;
			
			import components.VideoDispUnit;
			
			import flash.events.NetStatusEvent;
			import flash.net.SharedObject;
			import flash.text.engine.FontWeight;
			
			import flashx.textLayout.container.ContainerController;
			import flashx.textLayout.elements.ParagraphElement;
			import flashx.textLayout.elements.SpanElement;
			import flashx.textLayout.elements.TextFlow;
			import flashx.textLayout.factory.TextFlowTextLineFactory;
			
			import mx.collections.ArrayCollection;
			import mx.containers.Canvas;
			import mx.controls.Image;
			import mx.controls.VSlider;
			import mx.controls.VideoDisplay;
			import mx.core.mx_internal;
			import mx.states.AddChild;
			import mx.utils.ObjectUtil;
			
			import spark.components.Group;
			import spark.components.Panel;
			import spark.utils.TextFlowUtil;
			
			[Bindable] public var talkerListAC:Array;
			
			private var videoListAC:Array;
			
			private var ncSuccess:Boolean;
			
			public var talkerListSO:SharedObject;
			public var videoListSO:SharedObject;
			public var imageListSO:SharedObject;
			public var userid:String;
			public var username:String;
			public var topicid:String;
			public var topic:String;
			public var clientid:String;
			public var nc:NetConnection;
			
			private function init():void
			{
				try{
					//FLASHVARS CODE
					var paramObj:Object = this.parameters;
					
					this.userid = paramObj["userid"];
					this.username = paramObj["username"];
					this.topicid = paramObj["topicid"];
					this.topic = paramObj["topic"];
					this.clientid = null;
					
					// new netconnection
					nc = new NetConnection();
					nc.client = this;
					
					// set encoding to old amf
					nc.objectEncoding = ObjectEncoding.AMF3;
					
					// netstatus event listening
					nc.addEventListener( NetStatusEvent.NET_STATUS , netStatus );
					
					// connect to red5, passing false as parameter
					nc.connect( "rtmp://localhost:1935/tah-commapp-server/" + topicid, userid, username, topicid, topic );
					topicTitle.text = "Topic: " + topic;
					welcomeUser.text = "Welcome " + username;
					
					//set volume and mic slider
					//micVolslider = new VSlider();
					//micVolslider.x = micVol.x;
					//micVolslider.y = micVol.x;
					//micVolslider.visible = true;
					
					//set the video List
					videoListAC = new Array();
					
					talkerUnitListAC = new Array();
					
					vi = new Video();
					vi.width = 160;
					vi.height = 120;
					vi.smoothing = true;
					
					othervideoSwitch.selected = true;
					doDisplay();
				}catch(e:Error){
//					logger.addLoggingMessage(e.getStackTrace());
				}
				
			}
			
			private function netStatus ( event:NetStatusEvent ):void
			{
				if( event.info.code == "NetConnection.Connect.Success" ) {
					ncSuccess = true;
//					logger.addLoggingMessage("NC Success");
					talkerListSO = SharedObject.getRemote("talkerListSO-" + topicid, nc.uri, false);
					talkerListSO.connect(nc);
					talkerListSO.addEventListener(SyncEvent.SYNC, talkerListSync);
					//talkerListSO.client = this;
//					logger.addLoggingMessage("SO Success");
					
					/*****************************************
					 * *Target: new SharedObject of video list
					 * *Added by: Situ
					 * ***************************************/
					videoListSO = SharedObject.getRemote("videoListSO-" + topicid,nc.uri,false);
					videoListSO.connect(nc);
					videoListSO.addEventListener(SyncEvent.SYNC, videoListSync);
//					logger.addLoggingMessage("video SO Success");
					
					//imageListSO = SharedObject.getRemote("imageListSO-" + topicid,nc.uri,false);
					//imageListSO.connect(nc);
					//imageListSO.addEventListener(SyncEvent.SYNC, imageListSync);
				} else {
					ncSuccess = false;
					// connection failed
//					logger.addLoggingMessage(event.info.code);
				}
			}
			
			private var firstUser:Boolean = true;
			private function talkerListSync ( event:SyncEvent ):void
			{
//				logger.addLoggingMessage("++++Talker List Sync");
				
				var tmpArray:Array = new Array();
				var listName:String = "talkerListAC";
				for (var i:int = 0; i < (talkerListSO.data[ listName ]).length; i++ ) {
					tmpArray.push(((talkerListSO.data[ listName ])[i])[1]);
					
					// record the clientID generated by RED5 Server
					if(null == this.clientid){
						if(this.username == ((talkerListSO.data[ listName ])[i])[1]){
							this.clientid = ((talkerListSO.data[ listName ])[i])[0];
//							logger.addLoggingMessage("client id: "+this.clientid+"   username: "+this.username);
						}
					}
				}
				//talkerListAC = new Array();
				talkerListAC = tmpArray;
				
				rebuild_talker_list_unit_list();
				
				//check if this is the first login user and show up message
				if(firstUser){
					if( talkerListAC.length==1){
						//i am the first login user
						var para:ParagraphElement = new ParagraphElement();
						var span:SpanElement = new SpanElement();
						span.text =  "    Searching other users to join the conversations. This should only take a minute.";
						span.color = "#f790b9";
						span.fontWeight = FontWeight.BOLD;
						para.addChild(span);
						txt_history.textFlow.addChild(para);
						 
						para = new ParagraphElement();
						span = new SpanElement();
						span.text = " ";
						para.addChild(span);
						txt_history.textFlow.addChild(para); 
						
						//txt_history.validateProperties();
						
						/* 
						txt_history.validateNow();
						txt_history.scroller.verticalScrollBar.value = txt_history.scroller.verticalScrollBar.maximum;
						 */
					}else{
						firstUser = false;
					}
				}				
			}
			
			/**************************************************************
			 * *Synchronize video list
			 * *Added by: Situ
			 * ************************************************************/
			
			public function videoListSync(event:SyncEvent):void
			{
//				logger.addLoggingMessage("++++Video List Sync");
				//logger.addLoggingMessage(videoListSO.toString());
				
				var tmpArray:Array;
				var listName:String = "videoListAC";
//				logger.addLoggingMessage("vid syc step 1 ...");
				tmpArray = new Array();
				
				
				for (var i :int= 0; i < (videoListSO.data[ listName ]).length; i++ ) {
					tmpArray.push((videoListSO.data[ listName ])[i]);
				}
//				logger.addLoggingMessage("vid syc step 2 ...");
				videoListAC = null;
				videoListAC = tmpArray;	
				if(videoListAC == null) {
//					logger.addLoggingMessage("videoListAC is null");
				}else {
//					logger.addLoggingMessage("The length of videoListAC is: " + videoListAC.length);
				} 
				
//				logger.addLoggingMessage("Video List: ");
				for(var i:int =0 ; i<videoListAC.length ;i++){
//					logger.addLoggingMessage(i+": "+videoListAC[i]);
				}
				doDisplay();
			}
			
			/*protected function btn_startup_clickHandler(event:MouseEvent):void
			{
			this.dispatchEvent(new CommAppEvent(CommAppEvent.STARTUP));
			}*/
			
			protected function enter_txtevent(event:Event):void
			{
				if(txt_msg.text!=""){
					try{
						nc.call("send_msgtoroom", null, this.userid, this.username, this.topicid, txt_msg.text);
					}catch(e:Error){
//						logger.addLoggingMessage(e.getStackTrace());
					}
					txt_msg.text = "";
				}
				
			}
			public function receivePublicMsg(fromUser:String, msg:String):void {
				var para:ParagraphElement = new ParagraphElement(); 
				var span1:SpanElement = new SpanElement(); 
				var span2:SpanElement = new SpanElement(); 
				span1.text = "  " + fromUser + " :  "; 
				//span1.fontStyle = FontStyle.BOLD;
				span1.fontSize = 14;
				span1.fontFamily = "Times New Roman";
				span1.color = "#25bbdb";
				
				span2.text = msg;
				span2.fontStyle = FontStyle.ITALIC;
				span2.fontSize = 14;
				span2.fontFamily = "Times New Roman";
				
				
				para.addChild(span1); 
				para.addChild(span2);
				txt_history.textFlow.addChild(para);
				
				//txt_history.validateProperties();
				txt_history.validateNow();
				txt_history.scroller.verticalScrollBar.value = txt_history.scroller.verticalScrollBar.maximum;
			}
			/***************************************************************************/
			private var vi:Video;
			private var vidListAC:Array;      //Array<Video>
			private var snd:Sound;
			private var cam:Camera;
			private var mic:Microphone;
			private var inStream:Array; //Array<NetStream>
			private var outStream:NetStream;
			//private var broadCasting = false;
			
			protected function videoStart():void
			{
				if( true == ncSuccess )
				{
					//Begins recording
					beginRec();
					getVideoLocal();
				}
				else
				{
//					logger.addLoggingMessage("Cannot start video ...");
				}
			}
			protected function videoStop():void
			{
//				logger.addLoggingMessage("Stopping video ...");
				endRec();
				stopVideoLocal();
			}
			///////////////////  Recording Part   ///////////////////
			
			//Start recording
			protected function beginRec():void
			{
				outStream = new NetStream(nc);
				//outStream.client = this;
				
//				logger.addLoggingMessage("Bigin Recording ...");
				
				cam = Camera.getCamera();
				if(cam!=null){
					cam.setMode(320,240,15);//Set size and Frame Rate
					cam.setQuality(20000,80);//Set video quality
					
					outStream.attachCamera(cam);//activate video
				}
				
				
				mic = Microphone.getMicrophone();
				if(mic!=null){
					mic.setUseEchoSuppression(true);
					//mic.setLoopBack(true);
					//var level:int = mic.;
					//logger.addLoggingMessage("activity level: "+ level);
					mic.setSilenceLevel(15);
					mic.gain = micVol.value;
					outStream.attachAudio(mic);
				}
				
				outStream.publish(this.clientid,"live");
				
				//Add himself to the video list
//				logger.addLoggingMessage("Client ID is: " + this.clientid+"  Topic ID is: "+ this.topicid);
				nc.call("send_msgtoroom", null, this.username, this.topicid, "I am adding video list");
				nc.call("addVideoList", null, this.clientid, this.topicid);
				nc.call("testMethod", null, this.clientid, this.topicid);
//				logger.addLoggingMessage("++++Video List Added");
				
			}
			
			//Stop recording
			private function endRec():void
			{
//				logger.addLoggingMessage("End Recording ...");
				outStream.close();
				//remove himself to the video list
				nc.call("send_msgtoroom", null, this.username, this.topicid, "I am adding video list");
				nc.call("removeVideoList", null, this.clientid, this.topicid);
//				logger.addLoggingMessage("++++Video List Removed");
				
				//vi = null;
				
				
			}
			
			///////////////////\/\/\/\Recording Part/\/\/\/\//////////////////
			
			///////////////////       Displaying Part/     ///////////////////
			/*
			* Display local video
			*/
			//public var videoLocal:VideoDisplay;
			
			private function getVideoLocal():void
			{
				
//				logger.addLoggingMessage("Getting Local Video ... ");
				
				vi.attachCamera(this.cam);
				
				//videoLocal.addChild(vi);
				//videoLocal.attachCamera(this.cam);
				//doDisplay();
			}
			
			private function stopVideoLocal():void
			{
				// Don't show local video 
				//videoLocal.removeChild(vi);
				//videoLocal.attachCamera(null);
				//videoLocal.mx_internal::videoPlayer.clear();
				//videoLocal.invalidateProperties();
				
				vi.attachCamera(null);
				vi.clear();
//				logger.addLoggingMessage("Video removed ...");
				
				//doDisplay();
			}
			[ArrayElementType("mx.controls.VideoDisplay")]
			private var dispListAC:Array=null;
			
			private var dispUnitListAC:Array = null;
			private var dispRowGroupAC:Array = null; //Put HGroup in it
			
			private function doDisplay():void
			{
//				logger.addLoggingMessage("Do display ...");
				
				var dispRowCapacity:int = 4;
				
				//Make all netstreams in inStream stop playing
				if(null!=inStream&&inStream.length>0){
					for(var i:int=0;i<inStream.length;i++){
						(inStream[i] as NetStream).close();
					}
				}
				inStream = new Array();
				
				if(null!=vidListAC&&vidListAC.length>0){
					for(var i:int=0;i<vidListAC.length;i++){
						(vidListAC[i]as Video).clear();
					}
				}
				vidListAC = new Array();
				
				dispRowGroupAC = new Array();
				
				while(videoGroup.numElements>0){
					videoGroup.removeElementAt(0);
				}
//				logger.addLoggingMessage("row group removed");
				
				vidListAC.push(vi);
				if(othervideoSwitch.selected){
					//Get video array of peers
					for(var i:int=0; i<videoListAC.length;i++){
//						logger.addLoggingMessage("video list is not empty.");
						if( this.clientid != videoListAC[i]){
//							logger.addLoggingMessage("There exist other peers on video list");
							
							var newInStream:NetStream = new NetStream(nc);
							//new Sound
							newInStream.play(videoListAC[i]as String);
							
							
							inStream.push(newInStream);
							
							var newVid:Video = new Video();
							newVid.width = 160;
							newVid.height = 120;
							newVid.smoothing = true;
							newVid.attachNetStream(newInStream);
							
							vidListAC.push(newVid);		
							
						}
					}
//					logger.addLoggingMessage("video array done!");
//					logger.addLoggingMessage("vidListAC: " + vidListAC.length);
				}
				
				
				
				//Assgin video array to VideoDisplay array
				//dispListAC = new Array();
				//logger.addLoggingMessage("dispListAC new!");
				//videoLocal.setStyle("radiusX",10);
				//videoLocal.setStyle("radiusY",10);
				//logger.addLoggingMessage("videoLocal corner radius set successfully!");
				
				//dispListAC.push(videoLocal);//Show local Video first
				//logger.addLoggingMessage("videoLocal pushed!");
				/* for(var i:int = 0; i<vidListAC.length;i++){
					var vDisp:VideoDisplay = new VideoDisplay();
					//Set the properties of videodisplays
					vDisp.width = (vidListAC[i] as Video).width;
					vDisp.height = (vidListAC[i] as Video).height;

					vDisp.addChild(vidListAC[i]as Video);
					//vDisp.volume = spVol.value;
					logger.addLoggingMessage("volume: " + vDisp.volume);
					vDisp.top = 0;
					
					dispListAC.push(vDisp);
				} */
				//logger.addLoggingMessage("dispListAC done!"); 
				////////////////////////////////////////////////////////////
				dispUnitListAC = new Array();
				
				for(var i:int=0;i<vidListAC.length;i++){
					var tempUnit:VideoDispUnit = new VideoDispUnit();
					
					try{
						//var tmpC:Canvas = new Canvas();
						//tmpC.width = 160;
						//tmpC.height = 120;
						//tmpC.setStyle("cornerRadius",20);
						//(dispListAC[i] as VideoDisplay).setStyle("cornerRadius",20);
						//(dispListAC[i] as VideoDisplay).mask = tempUnit.c3;
						//logger.addLoggingMessage("The cornerRadius of videodisplay set successfully!");
						
						//tempUnit.g1.addElementAt((dispListAC[i] as VideoDisplay),1);
						tempUnit.vd.addChild(vidListAC[i]as Video);
						
						//tempUnit.internalVD.addChild(vi);
					}catch(e:Error){
//						logger.addLoggingMessage(e.toString());
					}
					tempUnit.userName.text = "username"+(i+1);
					dispUnitListAC.push(tempUnit);
				}
				//Assign VidDisplay list to rowGroup and push rowGroup into dispRowGroupAC
				var newGroup:HGroup = null;
				//logger.addLoggingMessage("dispListAC.length: "+dispListAC.length);
				for(var i:int=0; i<dispUnitListAC.length; i++){
					if(i%dispRowCapacity == 0){
						if(newGroup!=null){
							dispRowGroupAC.push(newGroup);
						}
						newGroup = new HGroup();
						
						newGroup.gap = 11;
						newGroup.paddingLeft = 16;
						newGroup.paddingRight = 16;
						newGroup.paddingTop = 9;
						newGroup.paddingBottom = 9;
						//paddingTop="9"  paddingBottom="9" paddingLeft="5" paddingRight="0"
						//newGroup.paddingLeft = 5;
						//newGroup.paddingTop = 5;
					}
					//logger.addLoggingMessage("before addChild ...");
					newGroup.addElement(dispUnitListAC[i] as VideoDispUnit);
				}
				//logger.addLoggingMessage("addChild success!");
//				logger.addLoggingMessage("addElement success!");
				if(newGroup!=null){
					dispRowGroupAC.push(newGroup);
				}
//				logger.addLoggingMessage("VideoDisplay RowGroup Array done!");
				///////////////////////////////////////////////////////////////////
				
				//logger.addLoggingMessage("we wanna show it at videoGroup");
//				logger.addLoggingMessage("dispRowGroupAC.length: " + dispRowGroupAC.length);
				for(var i:int = 0; i<dispRowGroupAC.length;i++){
					videoGroup.addElement(dispRowGroupAC[i]as HGroup);
					
//					logger.addLoggingMessage("videoGroup numElement " + videoGroup.numElements);
					//logger.addLoggingMessage("videoGroup Element id: " + (dispRowGroupAC[i]as HGroup).id);
				}
				
			}
			
			///////////////////\/\/\/\Displaying Part/\/\/\///////////////////
			
			//var micVolslider:VSlider;
			private function spVolHandler():void
			{
//				logger.addLoggingMessage("spVolHandler");
				for(var i:int=0;i<inStream.length;i++){
					//((dispListAC[i]as VideoDisplay).getChildAt(0)as Video). = spVol.value;
					(inStream[i]as NetStream).soundTransform = new SoundTransform(spVol.value);
					
					
					//logger.addLoggingMessage("Volume " + i + ": "+ (dispListAC[i]as VideoDisplay).volume);
					//logger.addLoggingMessage("VideoLocal volume: "+ videoLocal.volume);
				}
//				logger.addLoggingMessage("complete without error");
			}
			
			//public var icon1:Image;
			//public var icon2:Image;
			//public var icon3:Image;
			
			public var icon:String;
			//public var imageListAC:Array;
			[Bindable] public var talkerUnitListAC:Array;
			
			private function rebuild_talker_list_unit_list():void
			{
				
				//var icon:Array = new Array({icon1,icon2,icon3});
				talkerUnitListAC = new Array();
				//imageListAC = new Array();
				for(var i:int=0; i<talkerListAC.length;i++){
					//imageListAC.push(icon);
//					logger.addLoggingMessage("talkerListAC["+i+"]: "+talkerListAC[i]);
					talkerUnitListAC.push( {name:talkerListAC[i],icon:"http://www.talkabouthealth.com:9000/image/"+talkerListAC[i]} );
				}
				//logger.addLoggingMessage("imageListAC length: "+imageListAC.length);
				//talkerUnitListAC.name = talkerListAC;
				//talkerUnitListAC.icon = imageListAC;
			}
			[Embed(source="images/popup_logo.gif")]
			[Bindable]
			public var imgLogo:Class;

			[Embed(source="images/popup_close.gif")]
			[Bindable]
			public var imgClose:Class;
			
			private function closeIE():void{
				//logger.addLoggingMessage("Button clicked!");
				navigateToURL(new URLRequest("javascript:window.opener = null; window.open(' ', '_self', ' '); window.close()"),"_parent");
				//logger.addLoggingMessage("Button clicked! no error");
			}
			
			[Bindable]
			private var txt_msgToast:String = "Enter your message here";
			private function txt_msgFocusOut():void{
				if(txt_msg.text == ""){
					txt_msg.text = txt_msgToast;
				}
				txt_msg.setStyle("color","#94CBD7"); //blue gray
			}
			
			private function txt_msgFocusIn():void{
				if(txt_msg.text == txt_msgToast){
					txt_msg.text = "";
				}
				txt_msg.setStyle("color","#0B333C"); //black blue 
			}
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<comm:CommAppContext contextView="{this}" />
	</fx:Declarations>
	
	<s:layout>
		<s:VerticalLayout paddingLeft="5" paddingRight="5" paddingTop="5" paddingBottom="5"/>
	</s:layout>
	
	<!--<logger:LoggerModule id="logger" height="75"/>-->
	
	<s:VGroup width="720">
		<s:Group width="720" height="31" >
			
			<mx:Image source="{imgLogo}" width="233" height="31"/>
			<!--<mx:Image source="{imgClose}" width="100%" height="100%" horizontalAlign="right"
					  click="closeIE()"  />-->
			<mx:Button icon="{imgClose}" click="closeIE()" width="31" height="31" alpha="1.0" fillColors="[#FFFFFF, #FFFFFF, #FFFFFF, #FFFFFF]"  cornerRadius="13" fillAlphas="[1.0, 1.0, 1.0, 1.0]" y="0" x="689"/> 
		</s:Group>
		
		<s:Group width="100%">
			<s:layout>
				<s:BasicLayout/>
			</s:layout>
			<mx:Canvas width="100%" height="100%" styleName="canvas1"/>
			<s:VGroup id="videoGroup"  top="0"  left="0"/>
		</s:Group>
		
	</s:VGroup>
	<s:HGroup width="100%" >
		<!--<s:Button label="StartUp" id="btn_startup" click="btn_startup_clickHandler(event)"/>-->
		<s:Group width="100%" height="100%">
			<s:layout>
				<s:BasicLayout/>
			</s:layout>
			<s:VGroup paddingLeft="5" paddingRight="5" paddingTop="5" paddingBottom="5" width="100%" height="100%" x="0" y="0">
					
				<s:VGroup width="100%" height="100%">
					<s:HGroup>
						<!--<mx:Image id="logo" source="@Embed(source='assets/tahlogo.gif')" width="140" height="20"/>-->
						<s:Label id="topicTitle" verticalAlign="bottom" styleName="topicTitle" height="15"/>
					</s:HGroup>
					<mx:Canvas width="100%" height="204" cornerRadius="8" borderStyle="solid" borderThickness="1" verticalScrollPolicy="off" horizontalScrollPolicy="off" borderColor="#90CDF7">
						<s:TextArea width="99.6%" height="200" id="txt_history" editable="false" enabled="true" fontFamily="Times New Roman"  fontSize="14" horizontalCenter="0" verticalCenter="0"/>
						
						<mx:Canvas width="100%" height="202" cornerRadius="8" borderStyle="solid" borderThickness="3" verticalScrollPolicy="off" horizontalScrollPolicy="off" borderColor="#90CDF7" horizontalCenter="0" verticalCenter="0"/>
					</mx:Canvas>
				</s:VGroup>
				
				
				<s:HGroup id="cntrl_Group">
					<mx:CheckBox id="myvideoSwitch"  paddingTop="4" paddingLeft="15" label="Your Video On|Off" 
								 change="if(myvideoSwitch.selected == true) videoStart();
								 else videoStop();" />
					<mx:CheckBox id="othervideoSwitch"  paddingTop="4" label="Other members Video On|Off" 
								 change=" doDisplay();" />
					
					<mx:Label text="Vol:" paddingTop="4" paddingLeft="7" fontWeight="bold" fontFamily="Arial" fontStyle="italic" fontSize="14"/>
					
					<!--<s:HSlider id="spVol" 						   
							   minimum="0.0"
							   maximum="1.0"
							   value="1.0"
							   snapInterval="0.01"
							   liveDragging="true"
							   thumbRelease="spVolHandler()"/>-->
					<mx:Label text=":Mic" paddingTop="4" paddingLeft="80" paddingRight="20" fontWeight="bold" fontFamily="Arial" fontStyle="italic" fontSize="14"/>
					<!--<s:HSlider id="micVol"
							   minimum="0"
							   maximum="100"
							   value="80"
							   snapInterval="1"
							   liveDragging="true"
							   thumbRelease="if(mic!=null)mic.gain = micVol.value"/>-->					
				</s:HGroup>
				<mx:Canvas width="100%" height="29" cornerRadius="6" borderStyle="solid" borderThickness="1" verticalScrollPolicy="off" horizontalScrollPolicy="off" borderColor="#90CDF7" horizontalCenter="0" verticalCenter="0">
					<mx:TextInput width="100%" height="25" id="txt_msg" enter="enter_txtevent(event)"  horizontalCenter="0" verticalCenter="2" fontFamily="Times New Roman" fontStyle="italic" fontSize="12" cornerRadius="6" borderColor="#FFFFFF" borderStyle="none" textIndent="10" fontWeight="normal" text="{txt_msgToast}" focusOut="txt_msgFocusOut();" focusIn="txt_msgFocusIn()" color="#94CBD7"/>
					<mx:Canvas width="100%" height="29" cornerRadius="6" borderStyle="solid" borderThickness="3" verticalScrollPolicy="off" horizontalScrollPolicy="off" borderColor="#90CDF7" horizontalCenter="0" verticalCenter="0"/>
				</mx:Canvas>
				
				
			</s:VGroup>
			<s:VolumeBar id="spVol" 
					   minimum="0.0"
					   maximum="1.0"
					   value="0.5"
					   snapInterval="0.01"
					   liveDragging="true"
					   x="{cntrl_Group.x+othervideoSwitch.x+235}"
					   y="{cntrl_Group.y+othervideoSwitch.y}"
					   thumbRelease="spVolHandler()"/>
			<s:VolumeBar id="micVol" 
					   minimum="0"
					   maximum="100"
					   value="50"
					   snapInterval="1"
					   liveDragging="true"
					   x="{cntrl_Group.x+othervideoSwitch.x+275}"
					   y="{cntrl_Group.y+othervideoSwitch.y}"
					   thumbRelease="if(mic!=null)mic.gain = micVol.value" />
			
			
		</s:Group>
		<s:VGroup paddingLeft="5" paddingRight="5" paddingTop="5" paddingBottom="5" width="100%" height="100%">
			<s:Label id="welcomeUser" height="15"   styleName="welcomeUser"/>
			<!--<mx:Image source="photo/1.png"/>-->
			<mx:Canvas height="270" width="180" cornerRadius="12" borderStyle="solid" borderThickness="3" verticalScrollPolicy="off" horizontalScrollPolicy="off" borderColor="#90CDF7">
				
				<mx:DataGrid height="265" width="178" dataProvider="{talkerUnitListAC}" rowHeight="48" resizableColumns="false" verticalCenter="0" verticalGridLines="false" dragEnabled="false" draggableColumns="false" styleName="topicTitle"  horizontalCenter="0" fontFamily="Times New Roman">
					<mx:columns>
						<mx:DataGridColumn headerText="Icon" width="48" >
							<mx:itemRenderer >
								<fx:Component>
									<mx:Image source="{data.icon}" height="48" width="48" />
								</fx:Component>
							</mx:itemRenderer>
						</mx:DataGridColumn>
						<mx:DataGridColumn headerText="Name" width="130" textAlign="center">
							<mx:itemRenderer>
								<fx:Component>
									<mx:Label text="{data.name}" height="48" paddingTop="12"/>
								</fx:Component>
							</mx:itemRenderer>
						</mx:DataGridColumn>
					</mx:columns>		
				</mx:DataGrid>
				<mx:Canvas height="270" width="180" cornerRadius="12" borderStyle="solid" borderThickness="4" verticalScrollPolicy="off" horizontalScrollPolicy="off" borderColor="#90CDF7" horizontalCenter="0" verticalCenter="0"/>
			</mx:Canvas>
			
			
		</s:VGroup>
	</s:HGroup>
	<s:Group>
		<s:layout>
			<s:BasicLayout/>
		</s:layout>
		<s:Label text="Warning:" color="#25bbdb"/>
		<s:Label width="650"
				 text="                  All content on this site is informational and is not substitute for professional medical advice. Always seek the advice of your physician or other qualified health provider with questions regarding your health."/>
	</s:Group>	
</s:Application>
