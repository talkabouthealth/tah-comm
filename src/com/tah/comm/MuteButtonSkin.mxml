<?xml version="1.0" encoding="utf-8"?>

<!--

    ADOBE SYSTEMS INCORPORATED
    Copyright 2008 Adobe Systems Incorporated
    All Rights Reserved.

    NOTICE: Adobe permits you to use, modify, and distribute this file
    in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for the mute button of a Spark VideoPlayer component  
      in the normal skin state. The normal skin state means the component is not in 
      one of the <code>fullScreen</code> skin states.  

      @see spark.components.VideoPlayer
        
      @langversion 3.0
      @playerversion Flash 10
      @playerversion AIR 1.5
      @productversion Flex 4
-->
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" 
   xmlns:fb="http://ns.adobe.com/flashbuilder/2009" creationComplete="init()"
   alpha.disabled="0.5">

    <!-- host component -->
    <fx:Metadata>
        /** 
         * @copy spark.skins.spark.ApplicationSkin#hostComponent
         */
        [HostComponent("spark.components.mediaClasses.MuteButton")]
    </fx:Metadata>
    
    <fx:Script fb:purpose="styling">
        <![CDATA[
            /* Define the skin elements that should not be colorized. */
            //static private const exclusions:Array = ["volumeSymbol"];
            
            /**
             * @private
             */
           // override public function get colorizeExclusions():Array {return exclusions;}
            
            /* Define the symbol fill items that should be colored by the "symbolColor" style. */
            static private const symbols:Array = ["trapezoid", "yay1", "yay2"];
            
            /**
             * @private
             */
            override public function get symbolItems():Array {return symbols};
            
            /**
             * @private
             */
            override protected function initializationComplete():void
            {
                useChromeColor = true;
                super.initializationComplete();
            }
        ]]>
    </fx:Script>
    
    <fx:Script>
        <![CDATA[
            import mx.events.FlexEvent;
            
            import spark.components.mediaClasses.VolumeBar;
           
            private function init():void
            {
                // this is essentially just binding code.  Anytime the volume changes, 
                // let us know.
                volume = hostComponent.muted ? 0 : hostComponent.volume;
                hostComponent.addEventListener(FlexEvent.VALUE_COMMIT, valueCommitHandler);
                hostComponent.addEventListener(FlexEvent.MUTED_CHANGE, valueCommitHandler);
            }
            
            private function valueCommitHandler(event:Event):void
            {
                volume = hostComponent.muted ? 0 : hostComponent.volume;
            }
            
            private var _volume:Number = 1;

            /**
            *  The volume of the video player, specified as a value between 0 and 1.
            */
            public function get volume():Number
            {
                return _volume;
            }
            
            public function set volume(value:Number):void
            {
                if (value == _volume)
                    return;
                
                _volume = value;
                
            
                var bars:Array = [yay1, yay2];
                
                var curValue:Number = 0;
                for (var i:int = 0; i < bars.length; i++)
                {
                    if (value <= curValue)
                        setAlphaTo(bars[i], 0);
                    else if (value >= (curValue + 0.5))
                        setAlphaTo(bars[i], 1);
                    else
                        setAlphaTo(bars[i], (value-curValue)*2);
                    
                    curValue += 0.5;
                }
            }
            
            private function setAlphaTo(bar:Object, alpha:Number):void
            {
                
                    bar.alpha = alpha;
                
            }
        ]]>
    </fx:Script>
    
    
    <!-- states -->
    <s:states>
        <s:State name="up" />
        <s:State name="over"/>
        <s:State name="down" />
        <s:State name="disabled" />
    </s:states>
        
    
    
    <!-- layer 5: border - put on top of the fill so it doesn't disappear when scale is less than 1 -->
    <s:Rect left="0" right="0" top="0" bottom="0" width="38" height="24" alpha="0">
        <s:stroke>
            <s:SolidColorStroke color="0x131313" />
        </s:stroke>
    </s:Rect>
	<s:Rect left="0" right="0" top="0" bottom="0" width="38" height="24" alpha="0">
		<s:fill>
			<s:SolidColor color="0x131313" alpha="0"/>
		</s:fill>
	</s:Rect>
    
    <!--- Defines the volume symbol. -->
    <s:Group horizontalCenter="0" verticalCenter="0" id="volumeSymbol" >
    
        <!-- big trapezoid in center -->
		
		
		
		<s:Path data="M 0 4.233 L 0 10.557 L 4.345 10.557 L 9.765 14.791 L 9.765 0 L 4.346 4.233 L 0 4.233 Z" winding="nonZero" x="2.52" y="3.147">
				<s:fill>
					<s:SolidColor id="trapezoid" color="0x00000" color.over="0x333333" color.down="0x666666"/>
					
					
				</s:fill>
		</s:Path>
			
		
		<s:Path data="M 1.274 0 L 0 2.005 C 2.319 3.004 4.078 6.316 4.078 10.122 C 4.078 13.896 2.349 17.184 0.06 18.213 L 1.306 20.228 C 4.301 18.699 6.435 14.752 6.435 10.122 C 6.435 5.476 4.286 1.517 1.274 0 Z" winding="nonZero" x="17.553" y="0.419">
			<s:fill>
				<s:SolidColor id="yay2" color="0x00000" color.over="0x333333" color.down="0x666666"/>
			</s:fill>
		</s:Path>
		
		<s:Path data="M 1.248 0 L 0 1.963 C 1.028 2.88 1.724 4.462 1.724 6.222 C 1.724 7.931 1.069 9.473 0.09 10.401 L 1.32 12.389 C 2.982 11.075 4.082 8.805 4.082 6.222 C 4.082 3.603 2.95 1.305 1.248 0 Z" winding="nonZero" x="15.101" y="4.319">
			<s:fill>
				<s:SolidColor id="yay1" color="0x00000" color.over="0x333333" color.down="0x666666"/>
			</s:fill>
		</s:Path>
    </s:Group>
</s:SparkSkin>
